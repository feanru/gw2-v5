import CACHE_TTLS from"./cachePolicies.js";import{setupCacheSync,notifySet,notifyDelete,requestBundleSync}from"./cacheSync.js";import fetchWithRetry from"./fetchWithRetry.js";const cacheStore=new Map;setupCacheSync(cacheStore),requestBundleSync();const STORAGE_AVAILABLE="undefined"!=typeof localStorage,inFlight=new Map;function requestKey(e,{method:t="GET",headers:n={}}={}){return`${e}|${t.toUpperCase()}|${JSON.stringify(n)}`}function serializeEntry({value:e,expiresAt:t,etag:n,lastModified:r}){return JSON.stringify({value:e,expiresAt:t,etag:n,lastModified:r})}function deserializeEntry(e){try{return JSON.parse(e)}catch{return null}}function writeStorage(e,t){if(STORAGE_AVAILABLE)try{localStorage.setItem(e,serializeEntry(t))}catch{}}function readStorage(e){if(!STORAGE_AVAILABLE)return null;const t=localStorage.getItem(e);if(!t)return null;const n=deserializeEntry(t);return n||(localStorage.removeItem(e),null)}function cleanExpired(){if(!STORAGE_AVAILABLE)return;const e=[];for(let t=0;t<localStorage.length;t++){const n=localStorage.key(t),r=deserializeEntry(localStorage.getItem(n));if(!r)continue;const{expiresAt:o}=r;o&&Date.now()>o&&e.push(n)}e.forEach(e=>{localStorage.removeItem(e),notifyDelete(e)})}cleanExpired();export function setCached(e,t,n=void 0,r={}){if(void 0===n){const t=e.split("_")[0];n=CACHE_TTLS[t]}const o=null==n?null:Date.now()+n,{etag:i=null,lastModified:a=null}=r,l={value:t,expiresAt:o,updatedAt:(new Date).toISOString(),etag:i,lastModified:a};cacheStore.set(e,l),writeStorage(e,{value:t,expiresAt:o,etag:i,lastModified:a}),notifySet(e,l)}export function getCached(e,t=!1){let n=cacheStore.get(e);if(!n){const t=readStorage(e);if(t){const{value:r,expiresAt:o=null,etag:i=null,lastModified:a=null}=t;n={value:r,expiresAt:o,updatedAt:(new Date).toISOString(),etag:i,lastModified:a},cacheStore.set(e,n)}}return n?n.expiresAt&&Date.now()>n.expiresAt?(cacheStore.delete(e),STORAGE_AVAILABLE&&localStorage.removeItem(e),notifyDelete(e),null):t?n:n.value:null}export function fetchDedup(e,t={}){const n=requestKey(e,t),r=inFlight.get(n)||fetchWithRetry(e,t).finally(()=>inFlight.delete(n));return inFlight.set(n,r),r.then(e=>e.clone())}export default{getCached:getCached,setCached:setCached,fetchDedup:fetchDedup};