{"version":3,"file":"bundle-fractales.CRhvVgH5.min.js","sources":["../../src/js/bundle-fractales.js"],"sourcesContent":["import fetchWithRetry from './utils/fetchWithRetry.js';\n// Bundled fractales scripts\n// Utilidades compartidas para fractales y forja mística\nconst iconCache = {};\nconst rarityCache = {};\n\nasync function fetchIconsFor(ids = []) {\n  if (!ids.length) return;\n  try {\n    const res = await fetchWithRetry(`https://api.guildwars2.com/v2/items?ids=${ids.join(',')}&lang=es`);\n    const data = await res.json();\n    data.forEach(item => {\n      if (item && item.id) {\n        iconCache[item.id] = item.icon;\n        rarityCache[item.id] = item.rarity;\n      }\n    });\n  } catch {}\n}\n\nasync function fetchItemPrices(ids = []) {\n  if (!ids || ids.length === 0) return new Map();\n  const url = `https://api.datawars2.ie/gw2/v1/items/csv?fields=id,buy_price,sell_price&ids=${ids.join(',')}`;\n  try {\n    const csv = await fetchWithRetry(url).then(r => r.text());\n    const [header, ...rows] = csv.trim().split('\\n');\n    const headers = header.split(',');\n    const idIdx = headers.indexOf('id');\n    const buyIdx = headers.indexOf('buy_price');\n    const sellIdx = headers.indexOf('sell_price');\n    const result = new Map();\n    rows.forEach(row => {\n      const cols = row.split(',');\n      const id = parseInt(cols[idIdx], 10);\n      if (!isNaN(id)) {\n        result.set(id, {\n          buy_price: parseInt(cols[buyIdx], 10) || 0,\n          sell_price: parseInt(cols[sellIdx], 10) || 0\n        });\n      }\n    });\n    return result;\n  } catch (e) {\n    return new Map();\n  }\n}\n\nif (typeof window !== 'undefined') {\n  window.FractalesUtils = { fetchIconsFor, fetchItemPrices, iconCache, rarityCache };\n}\n// --- Lógica de Fractales Gold ---\n// IDs de ítems relevantes para fractales (basado en los nombres de la tabla de promedios)\n// Puedes agregar/quitar ítems aquí según tus necesidades\n// Ingredientes comerciables válidos para fractales, cotejados con dones.js\n// Lista exacta y en orden según indicación del usuario\nconst FRACTALES_ITEMS = [\n  { key: 'hueso', id: 24341, nombre: 'Hueso grande' },\n  { key: 'veneno', id: 24282, nombre: 'Vesícula de veneno potente' },\n  { key: 'polvo', id: 24276, nombre: 'Montón de polvo incandescente' },\n  { key: 'totem', id: 24299, nombre: 'Tótem intrincado' },\n  { key: 'garra', id: 24350, nombre: 'Garra grande' },\n  { key: 'colmillo', id: 24356, nombre: 'Colmillo grande' },\n  { key: 'sangre', id: 24294, nombre: 'Vial de sangre potente' },\n  { key: 'escama', id: 24288, nombre: 'Escama grande' },\n  { key: 'infusion_mas1', id: 49424, nombre: 'Infusión +1' }\n];\n\n// Datos de stacks de fractales obtenidos de registros históricos\n// Se utilizan para calcular promedios de materiales y oro\nconst FRACTAL_STACKS = [\n  {\n    stacks: 55,\n    data: {\n      oro_de_basura: 59510000,\n      garra: 4625.45,\n      totem: 4360.23,\n      sangre: 5005.12,\n      veneno: 4610.56,\n      hueso: 4685.78,\n      escama: 4750.98,\n      colmillo: 4845.01,\n      polvo: 4855.34,\n      infusion_mas1: 31039.56,\n      llaves_encriptacion: 1426.12,\n      empíreos: 8445.67\n    }\n  },\n  {\n    stacks: 17,\n    data: {\n      oro_de_basura: 18068500,\n      garra: 1340.23,\n      totem: 1640.45,\n      sangre: 1385.12,\n      veneno: 1475.56,\n      hueso: 1380.78,\n      escama: 1585.98,\n      colmillo: 1295.01,\n      polvo: 1540.34,\n      infusion_mas1: 9799.56,\n      llaves_encriptacion: 427.12,\n      empíreos: 4125.67\n    }\n  },\n  {\n    stacks: 32,\n    data: {\n      oro_de_basura: 34443500,\n      recetas_ascendentes: 65.23,\n      infusion_mas1: 18256.56,\n      llaves_encriptacion: 783.12,\n      hueso: 2685.78,\n      veneno: 2775.98,\n      polvo: 2665.34,\n      totem: 2815.01,\n      garra: 2730.45,\n      colmillo: 2685.12,\n      sangre: 2545.56,\n      escama: 2645.98,\n      hematites: 8090.12,\n      empíreos: 7645.67,\n      dragonita: 7645.67,\n      sacos_reliquias: 538.12,\n      saco_equipamiento: 4.01,\n      miniatura: 154\n    }\n  },\n  {\n    stacks: 4000,\n    data: {\n      oro_de_basura: 4283407500,\n      recetas_ascendentes: 7555,\n      infusion_mas1: 2263678,\n      llaves_encriptacion: 99812,\n      hueso: 334960,\n      veneno: 337195,\n      polvo: 337825,\n      totem: 338230,\n      garra: 339190,\n      colmillo: 336540,\n      sangre: 339475,\n      escama: 339260,\n      hematites: 1013835,\n      empíreos: 1012619,\n      dragonita: 1006125,\n      sacos_reliquias: 66795,\n      saco_equipamiento: 171,\n      miniatura: 19787\n    }\n  }\n];\n// Ítems no comerciables o no relevantes para fractales (comentados)\n// { key: 'infusion_mas1', id: 49424, nombre: 'Infusión +1' },\n// { key: 'empíreos', id: 46735, nombre: 'Fragmento empíreo' },\n// { key: 'dragonita', id: 46733, nombre: 'Mineral de dragonita' },\n// { key: 'hematites', id: 46731, nombre: 'Montón de polvo de hematites' },\n// { key: 'llaves_encriptacion', id: 70438, nombre: 'Clave de encriptación fractal' },\n// { key: 'oro_de_basura', id: 0, nombre: 'Oro crudo' },\n// { key: 'recetas_asce', id: 0, nombre: 'Recetas ascendidas' },\n// { key: 'sacos_reliquias', id: 79792, nombre: 'Puñado de reliquias fractales' },\n// { key: 'saco_equipamiento', id: 71510, nombre: 'Saco de equipo excepcional' },\n// { key: 'miniatura', id: 74268, nombre: 'Miniatura del profesor Miau' }\n\n\n// Utilidad para obtener solo los ítems con ID válido de mercado\nfunction getItemsConMercado() {\n  return FRACTALES_ITEMS.filter(item => item.id && item.id > 0);\n}\n\n// Utilidad para mapear key a nombre\nfunction keyToNombre(key) {\n  const item = FRACTALES_ITEMS.find(i => i.key === key);\n  return item ? item.nombre : key;\n}\nif (typeof window !== 'undefined') { window.FractalesLogic = { FRACTALES_ITEMS, FRACTAL_STACKS, getItemsConMercado, keyToNombre }; }\n// --- UI dinámico para fractales-gold.html ---\n// Variables globales para precios de fractales (se deben actualizar con fetch/cálculo real)\nlet valorCompra75919 = 0;\nlet valorVenta75919 = 0;\nlet valorCompra73248 = 0;\nlet valorVenta73248 = 0;\n\nfunction setValoresFractales({ compra75919, venta75919, compra73248, venta73248 }) {\n  valorCompra75919 = compra75919;\n  valorVenta75919 = venta75919;\n  valorCompra73248 = compra73248;\n  valorVenta73248 = venta73248;\n}\n\n// Cache para iconos y rarezas\n// Mapeo simple de key a ID para obtener iconos\nconst ICON_ID_MAP = {\n  garra: 24350,\n  totem: 24299,\n  sangre: 24294,\n  veneno: 24282,\n  hueso: 24341,\n  escama: 24288,\n  colmillo: 24356,\n  polvo: 24276,\n  infusion_mas1: 49424,\n  llaves_encriptacion: 70438,\n  empíreos: 46735,\n  hematites: 46731,\n  dragonita: 46733,\n  sacos_reliquias: 79792,\n  saco_equipamiento: 71510,\n  miniatura: 74268,\n  encriptacion_fractal: 75919,\n  matriz_estabilizadora: 73248\n};\n\n\nfunction getIconByKey(key) {\n  const id = ICON_ID_MAP[key];\n  return id ? iconCache[id] || '' : '';\n}\n\nfunction getRarityByKey(key) {\n  const id = ICON_ID_MAP[key];\n  return id ? rarityCache[id] || '' : '';\n}\n\nlet contribucionesChart = null;\nlet abrirVenderChart = null;\n// --- Helper para obtener precios de múltiples ítems en una sola llamada ---\n\n// --- Renderiza la tabla de promedios por stack ---\nasync function renderTablaPromedios(containerId = 'tabla-promedios') {\n  try {\n    const sets = FRACTAL_STACKS;\n    const claves = [\n      { key: 'oro_de_basura', nombre: 'Oro crudo' },\n      { key: 'garra', nombre: 'Garra potente' },\n      { key: 'totem', nombre: 'Tótem intrincado' },\n      { key: 'sangre', nombre: 'Vial de sangre potente' },\n      { key: 'veneno', nombre: 'Vesícula de veneno potente' },\n    { key: 'hueso', nombre: 'Hueso grande' },\n    { key: 'escama', nombre: 'Escama blindada' },\n    { key: 'colmillo', nombre: 'Colmillo afilado' },\n    { key: 'polvo', nombre: 'Montón de polvo incandescente' },\n    { key: 'infusion_mas1', nombre: 'Infusión +1' },\n    { key: 'llaves_encriptacion', nombre: 'Clave de encriptación fractal' },\n    { key: 'empíreos', nombre: 'Fragmento empíreo' },\n    { key: 'recetas_ascendentes', nombre: 'Recetas ascendentes' },\n    { key: 'hematites', nombre: 'Montón de polvo de hematites' },\n    { key: 'dragonita', nombre: 'Mineral de dragonita' },\n    { key: 'sacos_reliquias', nombre: 'Puñado de reliquias fractales' },\n    { key: 'saco_equipamiento', nombre: 'Saco de equipo excepcional' },\n    { key: 'miniatura', nombre: 'Miniatura del profesor Miau' }\n  ];\n    const promedios = {};\n    claves.forEach(({ key }) => {\n      let suma = 0, sumaStacks = 0, apariciones = 0;\n      sets.forEach(set => {\n        if (set.data[key] !== undefined) {\n          suma += set.data[key];\n          sumaStacks += set.stacks;\n          apariciones++;\n        }\n      });\n      if (apariciones === 1) {\n        const set = sets.find(s => s.data[key] !== undefined);\n        promedios[key] = set.data[key] / set.stacks;\n      } else if (apariciones > 1) {\n        promedios[key] = suma / sumaStacks;\n      } else {\n        promedios[key] = undefined;\n      }\n    });\n\n    const rows = claves.map(({ key, nombre }) => ({\n      id: key,\n      nombre,\n      icon: getIconByKey(key),\n      rarity: getRarityByKey(key),\n      promedio: promedios[key]\n    }));\n\n    const container = document.getElementById(containerId);\n    container.innerHTML = '';\n    const table = document.createElement('table');\n    table.className = 'table-modern';\n    table.innerHTML = `\n      <thead>\n        <tr>\n          <th><div class=\"dato-item\">Recompensa</div></th>\n          <th><div class=\"dato-item\">Promedio por stack</div></th>\n        </tr>\n      </thead>\n      <tbody></tbody>\n    `;\n    container.appendChild(table);\n    const tbody = table.querySelector('tbody');\n    rows.forEach((row, idx) => {\n      const tr = document.createElement('tr');\n      tr.setAttribute('data-id', row.id);\n      const iconHtml = row.icon ? `<img src=\"${row.icon}\" class=\"item-icon\">` : '';\n      const rarityClass = typeof getRarityClass === 'function' ? getRarityClass(row.rarity) : '';\n      const value = row.promedio !== undefined ? (row.id === 'oro_de_basura' ? window.formatGoldColored(row.promedio) : row.promedio.toFixed(2)) : '-';\n      tr.innerHTML = `\n        <td><div class=\"dato-item\">${iconHtml}<span class=\"${rarityClass}\">${row.nombre}</span></div></td>\n        <td><div class=\"dato-item-info\">${value}</div></td>\n      `;\n      tbody.appendChild(tr);\n    });\n  } catch (err) {\n    console.error('Error en renderTablaPromedios:', err);\n  }\n}\n\n// --- Renderiza la tabla de precios unitarios de materiales ---\nasync function renderTablaPrecios(containerId = 'tabla-precios-fractales') {\n  try {\n    const items = getItemsConMercado();\n    let itemsMostrar = [...items];\n    if (!itemsMostrar.find(i => i.key === 'infusion_mas1')) {\n      const infusion = FRACTALES_ITEMS.find(i => i.key === 'infusion_mas1');\n      if (infusion) itemsMostrar.push(infusion);\n    }\n    // Calcular promedios ponderados por material (igual que en renderTablaPromedios)\n    const sets = FRACTAL_STACKS;\n    const promedios = {};\n    itemsMostrar.forEach(item => {\n      let suma = 0, sumaStacks = 0, apariciones = 0;\n      sets.forEach(set => {\n        if (set.data[item.key] !== undefined) {\n          suma += set.data[item.key];\n          sumaStacks += set.stacks;\n        apariciones++;\n      }\n    });\n    if (apariciones === 1) {\n      const set = sets.find(s => s.data[item.key] !== undefined);\n      promedios[item.key] = set.data[item.key] / set.stacks;\n    } else if (apariciones > 1) {\n      promedios[item.key] = suma / sumaStacks;\n    } else {\n      promedios[item.key] = undefined;\n    }\n    });\n    const priceMap = await fetchItemPrices(itemsMostrar.map(i => i.id));\n    const precios = itemsMostrar.map(item => ({\n      ...item,\n      buy_price: priceMap.get(item.id)?.buy_price || 0,\n      sell_price: priceMap.get(item.id)?.sell_price || 0\n    }));\n\n    const rows = precios.map(item => ({\n      id: item.id,\n      key: item.key,\n      nombre: keyToNombre(item.key),\n      buy_price: item.buy_price,\n      sell_price: item.sell_price,\n      promedio: promedios[item.key],\n      icon: getIconByKey(item.key),\n      rarity: rarityCache[item.id]\n    }));\n\n    const container = document.getElementById(containerId);\n    container.innerHTML = '';\n    const table = document.createElement('table');\n    table.className = 'table-modern';\n    table.innerHTML = `\n      <thead>\n        <tr>\n          <th><div class=\"dato-item\">Material</div></th>\n          <th><div class=\"dato-item\">Precio compra</div></th>\n          <th><div class=\"dato-item\">Precio venta</div></th>\n          <th><div class=\"dato-item\">Total compra (prom)</div></th>\n          <th><div class=\"dato-item\">Total venta (prom)</div></th>\n        </tr>\n      </thead>\n      <tbody></tbody>\n    `;\n    container.appendChild(table);\n    const tbody = table.querySelector('tbody');\n    rows.forEach((row, idx) => {\n      const tr = document.createElement('tr');\n      tr.setAttribute('data-id', row.id);\n      const totalCompra = row.promedio !== undefined ? window.formatGoldColored(Math.round(row.buy_price * row.promedio)) : '-';\n      const totalVenta = row.promedio !== undefined ? window.formatGoldColored(Math.round(row.sell_price * row.promedio)) : '-';\n      const iconHtml = row.icon ? `<img src=\"${row.icon}\" class=\"item-icon\">` : '';\n      const rarityClass = typeof getRarityClass === 'function' ? getRarityClass(row.rarity) : '';\n      tr.innerHTML = `\n        <td><div class=\"dato-item\">${iconHtml}<span class=\"${rarityClass}\">${row.nombre}</span></div></td>\n        <td><div class=\"dato-item-info\">${window.formatGoldColored(row.buy_price)}</div></td>\n        <td><div class=\"dato-item-info\">${window.formatGoldColored(row.sell_price)}</div></td>\n        <td><div class=\"dato-item-info\">${totalCompra}</div></td>\n        <td><div class=\"dato-item-info\">${totalVenta}</div></td>\n      `;\n      tbody.appendChild(tr);\n    });\n  } catch (err) {\n    console.error('Error en renderTablaPrecios:', err);\n  }\n}\n\n// --- Renderiza la tabla resumen de oro crudo + materiales × 0.85 ---\nasync function renderTablaResumenOro(containerId = 'tabla-resumen-oro', preciosFractales = {}) {\n  try {\n    // 1. Promedio de oro crudo\n    const sets = FRACTAL_STACKS;\n    let suma = 0, sumaStacks = 0;\n    sets.forEach(set => {\n      if (set.data[\"oro_de_basura\"] !== undefined) {\n        suma += set.data[\"oro_de_basura\"];\n        sumaStacks += set.stacks;\n      }\n    });\n    const promedioOro = sumaStacks > 0 ? suma / sumaStacks : 0;\n\n  // 2. Precios de materiales comerciables\n    const items = getItemsConMercado();\n    // Incluye la infusión si no está\n    let itemsMostrar = [...items];\n    if (!itemsMostrar.find(i => i.key === 'infusion_mas1')) {\n      const infusion = FRACTALES_ITEMS.find(i => i.key === 'infusion_mas1');\n      if (infusion) itemsMostrar.push(infusion);\n    }\n    // Fetch precios\n    const priceMap = await fetchItemPrices(itemsMostrar.map(i => i.id));\n    const precios = itemsMostrar.map(item => ({\n      ...item,\n      buy_price: priceMap.get(item.id)?.buy_price || 0,\n      sell_price: priceMap.get(item.id)?.sell_price || 0\n    }));\n\n  // 3. Promedios por material (solo los comerciables)\n    const setsPromedios = FRACTAL_STACKS;\n    const promedios = {};\n    precios.forEach(item => {\n      let suma = 0, sumaStacks = 0, apariciones = 0;\n      setsPromedios.forEach(set => {\n        if (set.data[item.key] !== undefined) {\n          suma += set.data[item.key];\n          sumaStacks += set.stacks;\n          apariciones++;\n        }\n      });\n      if (apariciones === 1) {\n        const set = setsPromedios.find(s => s.data[item.key] !== undefined);\n        promedios[item.key] = set.data[item.key] / set.stacks;\n      } else if (apariciones > 1) {\n        promedios[item.key] = suma / sumaStacks;\n      } else {\n        promedios[item.key] = undefined;\n      }\n    });\n\n  // 4. Sumar totales de compra/venta\n    let totalCompra = 0, totalVenta = 0;\n    precios.forEach(item => {\n      const promedio = promedios[item.key];\n      if (promedio !== undefined) {\n        totalCompra += item.buy_price * promedio;\n        totalVenta += item.sell_price * promedio;\n      }\n    });\n\n  // 5. Aplicar 0.85 y sumar oro crudo\n    const sumaCompra = promedioOro + (totalCompra * 0.85);\n    const sumaVenta = promedioOro + (totalVenta * 0.85);\n    const contribuciones = [{ nombre: \"Oro crudo\", valor: promedioOro }];\n    precios.forEach(item => {\n      const promedio = promedios[item.key];\n      if (promedio !== undefined) {\n        contribuciones.push({ nombre: keyToNombre(item.key), valor: item.sell_price * promedio * 0.85 });\n      }\n    });\n\n\n  // 7. Render tabla\n    const htmlResumen = `\n      <table class=\"table-modern\" style=\"margin-top:12px;\">\n        <thead>\n          <tr>\n            <th><div class=\"dato-item\">Resumen</div></th>\n          <th><div class=\"dato-item\">Valor total</div></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><div class=\"dato-item\">Oro crudo + (Total compra × 0.85)</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(Math.round(sumaCompra))}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\">Oro crudo + (Total venta × 0.85)</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(Math.round(sumaVenta))}</div></td>\n        </tr>\n      </tbody>\n    </table>\n  `;\n    if (containerId) {\n      const el = document.getElementById(containerId);\n      if (el) el.innerHTML = htmlResumen;\n    }\n    return { sumaCompra, sumaVenta, contribuciones };\n  } catch (err) {\n    console.error('Error en renderTablaResumenOro:', err);\n  }\n}\n\n// --- Renderiza la tabla resumen POR ENCRIPTACIÓN (divide valores finales entre 250) ---\nasync function renderTablaResumenOroIndividual(containerId = 'tabla-resumen-oro-individual', preciosFractales = {}) {\n  try {\n    // Reutilizamos la lógica de renderTablaResumenOro pero dividimos el resultado final entre 250\n    const resumen = await renderTablaResumenOro(undefined, preciosFractales);\n    if (!resumen) return;\n    const divisor = 250;\n    const sumaCompraInd = resumen.sumaCompra / divisor;\n    const sumaVentaInd = resumen.sumaVenta / divisor;\n\n    const htmlResumenInd = `\n      <table class=\"table-modern\" style=\"margin-top:12px;\">\n        <thead>\n          <tr>\n            <th><div class=\"dato-item\">Resumen</div></th>\n            <th><div class=\"dato-item\">Valor total</div></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><div class=\"dato-item\">Oro crudo + (Total compra × 0.85) ÷ 250</div></td>\n            <td><div class=\"dato-item-info\">${window.formatGoldColored(Math.round(sumaCompraInd))}</div></td>\n          </tr>\n          <tr>\n            <td><div class=\"dato-item\">Oro crudo + (Total venta × 0.85) ÷ 250</div></td>\n            <td><div class=\"dato-item-info\">${window.formatGoldColored(Math.round(sumaVentaInd))}</div></td>\n          </tr>\n        </tbody>\n      </table>\n    `;\n    if (containerId) {\n      document.getElementById(containerId).innerHTML = htmlResumenInd;\n    }\n    return { sumaCompra: sumaCompraInd, sumaVenta: sumaVentaInd };\n  } catch (err) {\n    console.error('Error en renderTablaResumenOroIndividual:', err);\n  }\n}\n\n\nfunction renderTablaReferenciasProfit(containerId = 'tabla-referencias-profit', preciosFractales = {}, resumen = {}) {\n  const {\n    compra75919 = 0,\n    venta75919 = 0,\n    compra73248 = 0,\n    venta73248 = 0\n  } = preciosFractales;\n  const { sumaVenta = 0 } = resumen;\n  const costoAbrir = (compra75919 + compra73248) * 250;\n  const roi = costoAbrir > 0 ? ((sumaVenta - costoAbrir) / costoAbrir) * 100 : 0;\n  const iconEnc = getIconByKey('encriptacion_fractal');\n  const iconMat = getIconByKey('matriz_estabilizadora');\n  const encIconHtml = iconEnc ? `<img src=\"${iconEnc}\" class=\"item-icon\">` : '';\n  const matIconHtml = iconMat ? `<img src=\"${iconMat}\" class=\"item-icon\">` : '';\n  const htmlFractales = `\n    <table class=\"table-modern\" style=\"margin-top:0;\">\n      <thead>\n        <tr>\n          <th><div class=\"dato-item\">Resumen</div></th>\n          <th><div class=\"dato-item\">Valor total</div></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><div class=\"dato-item\">${encIconHtml}Encriptación fractal (compra ×250)</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(compra75919 * 250)}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\">${encIconHtml}Encriptación fractal (venta ×250)</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(venta75919 * 250)}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\">${matIconHtml}Matriz estabilizadora (compra ×250)</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(compra73248 * 250)}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\">${matIconHtml}Matriz estabilizadora (venta ×250)</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(venta73248 * 250)}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\">Suma Encriptación + Matriz (compra) - 15% de comisión</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(((compra75919 + compra73248) * 250) * 0.85)}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\">Suma Encriptación + Matriz (venta) - 15% de comisión</div></td>\n          <td><div class=\"dato-item-info\">${window.formatGoldColored(((venta75919 + venta73248) * 250) * 0.85)}</div></td>\n        </tr>\n        <tr>\n          <td><div class=\"dato-item\"><strong>ROI abrir stack</strong></div></td>\n          <td><div class=\"dato-item-info\" style=\"color:${roi>=0 ? 'green' : 'red'};\">${roi.toFixed(2)} %</div></td>\n        </tr>\n      </tbody>\n    </table>\n  `;\n  document.getElementById(containerId).innerHTML = htmlFractales;\n}\n\nfunction renderGraficoContribuciones(contribuciones = [], containerId = 'contribuciones-chart') {\n  const ctx = document.getElementById(containerId)?.getContext('2d');\n  if (!ctx) return;\n  if (contribucionesChart) contribucionesChart.destroy();\n  const labels = contribuciones.map(c => c.nombre);\n  const data = contribuciones.map(c => c.valor / 10000);\n  contribucionesChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels,\n      datasets: [{\n        label: 'Oro',\n        data,\n        backgroundColor: 'rgba(54, 162, 235, 0.6)'\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: { legend: { display: false } },\n      scales: { y: { beginAtZero: true, title: { display: true, text: 'Oro' } } }\n    }\n  });\n}\n\nfunction renderGraficoAbrirVsVender(containerId = 'abrir-vs-vender-chart', preciosFractales = {}, resumen = {}) {\n  const ctx = document.getElementById(containerId)?.getContext('2d');\n  if (!ctx) return;\n  if (abrirVenderChart) abrirVenderChart.destroy();\n\n  const {\n    venta75919 = 0,\n    compra75919 = 0,\n    compra73248 = 0\n  } = preciosFractales;\n  const { sumaVenta = 0 } = resumen;\n\n  const venderStack = venta75919 * 250 * 0.85;\n  const abrirConLlaves = sumaVenta;\n  const abrirComprandoMatrices = sumaVenta - (compra73248 * 250);\n  const abrirComprandoTodo =\n    sumaVenta - ((compra73248 + compra75919) * 250);\n\n  abrirVenderChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: [\n        'Vender stack de encriptación',\n        'Abrir con llaves',\n        'Abrir comprando matrices',\n        'Abrir comprando matrices y encriptaciones'\n      ],\n      datasets: [{\n        label: 'Oro',\n        data: [\n          venderStack / 10000,\n          abrirConLlaves / 10000,\n          abrirComprandoMatrices / 10000,\n          abrirComprandoTodo / 10000\n        ],\n        backgroundColor: [\n          'rgba(255,99,132,0.6)',\n          'rgba(75,192,192,0.6)',\n          'rgba(255,205,86,0.6)',\n          'rgba(153,102,255,0.6)'\n        ]\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: { legend: { display: false } },\n      scales: {\n        y: { beginAtZero: true, title: { display: true, text: 'Oro' } }\n      }\n    }\n  });\n}\n\nfunction renderExtras(preciosFractales = {}, claveStack = 24.96) {\n  const { venta73248 = 0 } = preciosFractales;\n  const precioMatrizEl = document.getElementById('matriz-precio');\n  const conversionEl = document.getElementById('conversion-indirecta');\n  if (precioMatrizEl) {\n    precioMatrizEl.innerHTML = window.formatGoldColored(venta73248);\n  }\n  if (conversionEl) {\n    const total = Math.round(venta73248 * claveStack);\n    conversionEl.innerHTML = window.formatGoldColored(total);\n  }\n}\nif (typeof window !== 'undefined') { window.FractalesGoldUI = { setValoresFractales, ICON_ID_MAP, renderTablaPromedios, renderTablaPrecios, renderTablaResumenOro, renderTablaResumenOroIndividual, renderTablaReferenciasProfit, renderGraficoContribuciones, renderGraficoAbrirVsVender, renderExtras }; }\n"],"names":["iconCache","rarityCache","async","fetchItemPrices","ids","length","Map","url","join","csv","fetchWithRetry","then","r","text","header","rows","trim","split","headers","idIdx","indexOf","buyIdx","sellIdx","result","forEach","row","cols","id","parseInt","isNaN","set","buy_price","sell_price","e","window","FractalesUtils","fetchIconsFor","res","json","item","icon","rarity","FRACTALES_ITEMS","key","nombre","FRACTAL_STACKS","stacks","data","oro_de_basura","garra","totem","sangre","veneno","hueso","escama","colmillo","polvo","infusion_mas1","llaves_encriptacion","recetas_ascendentes","hematites","dragonita","sacos_reliquias","saco_equipamiento","miniatura","getItemsConMercado","filter","keyToNombre","find","i","FractalesLogic","ICON_ID_MAP","encriptacion_fractal","matriz_estabilizadora","getIconByKey","getRarityByKey","contribucionesChart","abrirVenderChart","renderTablaResumenOro","containerId","preciosFractales","suma","sumaStacks","undefined","promedioOro","itemsMostrar","infusion","push","priceMap","map","precios","get","setsPromedios","promedios","apariciones","s","totalCompra","totalVenta","promedio","sumaCompra","sumaVenta","contribuciones","valor","htmlResumen","formatGoldColored","Math","round","el","document","getElementById","innerHTML","err","console","error","FractalesGoldUI","setValoresFractales","compra75919","venta75919","compra73248","venta73248","renderTablaPromedios","sets","claves","container","table","createElement","className","appendChild","tbody","querySelector","idx","tr","setAttribute","iconHtml","rarityClass","getRarityClass","value","toFixed","renderTablaPrecios","renderTablaResumenOroIndividual","resumen","divisor","sumaCompraInd","sumaVentaInd","htmlResumenInd","renderTablaReferenciasProfit","costoAbrir","roi","iconEnc","iconMat","encIconHtml","matIconHtml","htmlFractales","renderGraficoContribuciones","ctx","getContext","destroy","labels","c","Chart","type","datasets","label","backgroundColor","options","responsive","plugins","legend","display","scales","y","beginAtZero","title","renderGraficoAbrirVsVender","renderExtras","claveStack","precioMatrizEl","conversionEl","total"],"mappings":"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"}