import{getCached}from"./cache.min.js";import fetchWithRetry from"./fetchWithRetry.min.js";const activeRequests=new Map;export function getRequest(e){return activeRequests.get(e)?.promise}function setRequest(e,t,s){return activeRequests.set(e,{promise:t,controller:s}),t.finally(()=>activeRequests.delete(e)),t}export function abortRequest(e){const t=activeRequests.get(e);t?.controller&&t.controller.abort()}export function fetchWithCache(e,t={},s=null,o=null,r){const n=activeRequests.get(e);n&&n.controller?.abort(),s&&!o&&(o=getCached(s,!0));const a={...t.headers||{}};o?.etag&&(a["If-None-Match"]=o.etag),o?.lastModified&&(a["If-Modified-Since"]=o.lastModified);const c=r?null:new AbortController,i=r??t.signal??c?.signal;return setRequest(e,fetchWithRetry(e,{...t,headers:a,signal:i}).then(async e=>304===e.status&&o?new Response(JSON.stringify(o.value),{status:200,headers:{"X-Cache":"HIT",ETag:o.etag||"","Last-Modified":o.lastModified||""}}):e).catch(e=>{if(e instanceof DOMException&&"AbortError"===e.name)throw e;throw e}),c).then(e=>e.clone())}export default{fetchWithCache:fetchWithCache,getRequest:getRequest,setRequest:(e,t)=>setRequest(e,t,null),abortRequest:abortRequest};