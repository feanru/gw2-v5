{"version":3,"file":"dones-core-vLiWc7EV.js","sources":["../../src/js/dones-core.js"],"sourcesContent":["import fetchWithRetry from './utils/fetchWithRetry.js';\n\nconst API_ITEM = 'https://api.guildwars2.com/v2/items/';\nconst API_PRICES = 'https://api.guildwars2.com/v2/commerce/prices/';\nconst itemCache = new Map();\nconst priceCache = new Map();\n\nconst FIXED_PRICE_ITEMS = { 19676: 10000 };\n\nconst EXCLUDED_ITEM_IDS = [\n  19675, 19925, 20796, 19665, 19674, 19626, 19672, 19673,\n  19645, 19650, 19655, 19639, 19635, 19621, 20799 // Cristal m√≠stico (no comerciable)\n];\n\nconst isGiftName = function(name){\n  if(!name) return false;\n  const lower = name.toLowerCase();\n  return lower.startsWith('don de ') || lower.startsWith('don del ') || lower.startsWith('don de la ');\n};\n\nconst shouldSkipMarketCheck = function(id){\n  return EXCLUDED_ITEM_IDS.includes(id);\n};\n\nconst fetchItemData = async function(id) {\n  if (itemCache.has(id)) return itemCache.get(id);\n  const stored = sessionStorage.getItem('item:' + id);\n  if (stored) {\n    const data = JSON.parse(stored);\n    itemCache.set(id, data);\n    return data;\n  }\n  const res = await fetchWithRetry(API_ITEM + id);\n  if (!res.ok) throw new Error('No se pudo obtener info de item ' + id);\n  const json = await res.json();\n  itemCache.set(id, json);\n  try { sessionStorage.setItem('item:' + id, JSON.stringify(json)); } catch(e) {}\n  return json;\n};\n\nconst fetchPriceData = async function(id) {\n  if (FIXED_PRICE_ITEMS[id] !== undefined) {\n    const value = FIXED_PRICE_ITEMS[id];\n    return {buys:{unit_price:value}, sells:{unit_price:value}};\n  }\n  if(shouldSkipMarketCheck(id)) return null;\n  if (priceCache.has(id)) return priceCache.get(id);\n  const stored = sessionStorage.getItem('price:' + id);\n  if (stored) {\n    const data = JSON.parse(stored);\n    priceCache.set(id, data);\n    return data;\n  }\n  const res = await fetchWithRetry(API_PRICES + id);\n  if (!res.ok) return null;\n  const json = await res.json();\n  priceCache.set(id, json);\n  try { sessionStorage.setItem('price:' + id, JSON.stringify(json)); } catch(e){}\n  return json;\n};\n\nexport { fetchItemData, fetchPriceData, isGiftName, shouldSkipMarketCheck };\n\n"],"names":["itemCache","Map","priceCache","FIXED_PRICE_ITEMS","EXCLUDED_ITEM_IDS","isGiftName","name","lower","toLowerCase","startsWith","shouldSkipMarketCheck","id","includes","fetchItemData","async","has","get","stored","sessionStorage","getItem","data","JSON","parse","set","res","fetchWithRetry","ok","Error","json","setItem","stringify","e","fetchPriceData","undefined","value","buys","unit_price","sells"],"mappings":"wCAEA,MAEMA,EAAY,IAAIC,IAChBC,EAAa,IAAID,IAEjBE,EAAoB,CAAE,MAAO,KAE7BC,EAAoB,CACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACjD,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGtCC,EAAa,SAASC,GAC1B,IAAIA,EAAM,OAAO,EACjB,MAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,WAAW,YAAcF,EAAME,WAAW,aAAeF,EAAME,WAAW,aACzF,EAEMC,EAAwB,SAASC,GACrC,OAAOP,EAAkBQ,SAASD,EACpC,EAEME,EAAgBC,eAAeH,GACnC,GAAIX,EAAUe,IAAIJ,GAAK,OAAOX,EAAUgB,IAAIL,GAC5C,MAAMM,EAASC,eAAeC,QAAQ,QAAUR,GAChD,GAAIM,EAAQ,CACV,MAAMG,EAAOC,KAAKC,MAAML,GAExB,OADAjB,EAAUuB,IAAIZ,EAAIS,GACXA,CACT,CACA,MAAMI,QAAYC,EA9BH,uCA8B6Bd,GAC5C,IAAKa,EAAIE,GAAI,MAAM,IAAIC,MAAM,mCAAqChB,GAClE,MAAMiB,QAAaJ,EAAII,OACvB5B,EAAUuB,IAAIZ,EAAIiB,GAClB,IAAMV,eAAeW,QAAQ,QAAUlB,EAAIU,KAAKS,UAAUF,GAAQ,CAAE,MAAMG,GAAI,CAC9E,OAAOH,CACT,EAEMI,EAAiBlB,eAAeH,GACpC,QAA8BsB,IAA1B9B,EAAkBQ,GAAmB,CACvC,MAAMuB,EAAQ/B,EAAkBQ,GAChC,MAAO,CAACwB,KAAK,CAACC,WAAWF,GAAQG,MAAM,CAACD,WAAWF,GACrD,CACA,GAAGxB,EAAsBC,GAAK,OAAO,KACrC,GAAIT,EAAWa,IAAIJ,GAAK,OAAOT,EAAWc,IAAIL,GAC9C,MAAMM,EAASC,eAAeC,QAAQ,SAAWR,GACjD,GAAIM,EAAQ,CACV,MAAMG,EAAOC,KAAKC,MAAML,GAExB,OADAf,EAAWqB,IAAIZ,EAAIS,GACZA,CACT,CACA,MAAMI,QAAYC,EAlDD,iDAkD6Bd,GAC9C,IAAKa,EAAIE,GAAI,OAAO,KACpB,MAAME,QAAaJ,EAAII,OACvB1B,EAAWqB,IAAIZ,EAAIiB,GACnB,IAAMV,eAAeW,QAAQ,SAAWlB,EAAIU,KAAKS,UAAUF,GAAQ,CAAE,MAAMG,GAAG,CAC9E,OAAOH,CACT"}