{"version":3,"file":"item-ui.Ctbwbi9k.min.js","sources":["../../src/js/item-ui.js"],"sourcesContent":["/**\n * GW2 Item Tracker v2 - UI Y PRESENTACIÓN (item-ui.js)\n *\n * getTotals() siempre devuelve los totales globales calculados por recalcAll y no acepta parámetros.\n */\n\nimport {\n  showSkeleton,\n  hideSkeleton,\n  showError,\n  hideError,\n  setQtyInputValue,\n  getQtyInputValue\n} from './ui-helpers.js';\nimport { register, update as updateState } from './utils/stateManager.js';\nimport { initLazyImages, observeSection } from './utils/lazyLoader.js';\n\n// Helpers para el input de cantidad global y mensajes de error se\n// comparten ahora desde ui-helpers.js\n\n// --- Helpers visuales ---\n\n// La función calcPercent se importa desde item.js\nfunction renderWiki(name) {\n  if (!name) return;\n  const nombre = encodeURIComponent(name.replaceAll(' ', '_'));\n  const wikiES = `https://wiki.guildwars2.com/wiki/es:${nombre}`;\n  const wikiEN = `https://wiki.guildwars2.com/wiki/${nombre}`;\n  const wikiLinksEl = document.getElementById('wiki-links');\n  if (!wikiLinksEl) return; // Evita errores si no existe el contenedor\n  wikiLinksEl.innerHTML = `\n    <div class=\"wiki-links\">\n      <a href=\"${wikiES}\" target=\"_blank\">Wiki en Español</a>\n      <a href=\"${wikiEN}\" target=\"_blank\">Wiki en Inglés</a>\n    </div>\n  `;\n}\n\n// --- Helpers de UI ---\n\n\n// --- Renderizado recursivo de ingredientes ---\nexport function renderRows(ings, nivel = 1, parentId = null, rowGroupIndex = 0, parentExpanded = true, path = []) {\n  // DEPURACIÓN opcional de los radios renderizados\n  // ings.forEach((ing, idx) => {\n  //   if (nivel > 0) {\n  //     console.log('[RENDER RADIO]', { id: ing.id, parentId, modeForParentCrafted: ing.modeForParentCrafted });\n  //   }\n  // });\n  \n  return ings.map((ing, idx) => {\n    const groupIdx = nivel === 0 ? idx : rowGroupIndex;\n    const rowBgClass = groupIdx % 2 === 0 ? 'row-bg-a' : 'row-bg-b';\n    const indent = nivel > 0 ? `style=\"padding-left:${nivel * 30}px\"` : '';\n    const childClass = `child-of-${ing.id}`;\n    const currentPath = [...path, ing._uid].join('-');\n    const expandButton = (ing.is_craftable && ing.children && ing.children.length)\n      ? `<button class=\"btn-expand-path\" data-path=\"${currentPath}\">${ing.expanded ? '-' : '+'}</button>` : '';\n    const isChild = nivel > 0;\n    const extraClass = isChild ? `child-of-${parentId}` : '';\n    const extraStyle = isChild && !parentExpanded ? 'style=\"display:none\"' : '';\n    const noMarketPrice = !ing.buy_price && !ing.sell_price;\n    const hasChildren = ing.is_craftable && ing.children && ing.children.length > 0;\n    const isLeaf = !hasChildren;\n    const showCrafted = nivel === 0 ||\n      (hasChildren && (noMarketPrice || ing.total_crafted != null)) ||\n      (!hasChildren && ing.total_crafted != null);\n    const rarityClass = typeof getRarityClass === 'function' ? getRarityClass(ing.rarity) : '';\n    \n    return `\n      <tr data-state-id=\"${ing._uid}\" data-path=\"${currentPath}\" class=\"${isChild ? `subrow subrow-${nivel} ${extraClass}` : ''} ${rowBgClass}\" ${extraStyle}>\n        <td class=\"th-border-left-items\" ${indent}><img data-src=\"${ing.icon}\" width=\"32\" class=\"lazy-img\" alt=\"\"></td>\n        <td><a href=\"/item?id=${ing.id}\" class=\"item-link ${rarityClass}\" target=\"_blank\">${ing.name}</a></td>\n        <td>${ing.countTotal != null ? ing.countTotal : ing.count}</td>\n        <td class=\"item-solo-buy\">\n          <div>${formatGoldColored(ing.total_buy)}</div>\n          <div class=\"item-solo-precio\">${formatGoldColored(ing.buy_price)} <span style=\"color: #c99b5b\">c/u</span></div>\n          ${isChild ? `<input type=\"radio\" name=\"mode-${ing._uid}\" class=\"chk-mode-buy\" data-uid=\"${ing._uid}\" ${ing.modeForParentCrafted === 'buy' ? 'checked' : ''} title=\"Usar precio de compra para el padre\">` : ''}\n        </td>\n        <td class=\"item-solo-sell\">\n          <div>${formatGoldColored(ing.total_sell)}</div>\n          <div class=\"item-solo-precio\">${formatGoldColored(ing.sell_price)} <span style=\"color: #c99b5b\">c/u</span></div>\n          ${isChild ? `<input type=\"radio\" name=\"mode-${ing._uid}\" class=\"chk-mode-sell\" data-uid=\"${ing._uid}\" ${ing.modeForParentCrafted === 'sell' ? 'checked' : ''} title=\"Usar precio de venta para el padre\">` : ''}\n        </td>\n        <td class=\"item-solo-crafted\">\n          ${\n            showCrafted\n              ? `<div>${formatGoldColored(ing.total_crafted || 0)}</div>` +\n                `<div class=\"item-solo-precio\">${formatGoldColored(0)} <span style=\"color:#c99b5b\">c/u</span></div>` +\n                `${isChild ? `<input type=\"radio\" name=\"mode-${ing._uid}\" class=\"chk-mode-crafted\" data-uid=\"${ing._uid}\" ${ing.modeForParentCrafted === 'crafted' ? 'checked' : ''} title=\"Usar precio de crafteo para el padre\">` : ''}`\n              : ''\n          }\n        </td>\n        <td class=\"th-border-right-items\">${expandButton}</td>\n      </tr>\n      ${(ing.is_craftable && ing.children && ing.children.length && parentExpanded && ing.expanded) ? renderRows(ing.children, nivel + 1, ing.id, groupIdx, ing.expanded, [...path, ing._uid]) : ''}\n    `;\n  }).join('');\n}\n\n// --- Renderizado de la fila principal del ítem (nodo raíz) ---\n// --- Renderizado SOLO del nodo raíz. Prohibido usar mainNode.total_buy, siempre usar getTotals() ---\n// --- Renderizado de la fila principal del ítem (nodo raíz) ---\n// --- SOLO del nodo raíz. Totales siempre desde getTotals(), que devuelve los totales globales calculados por recalcAll ---\nexport function renderMainItemRow(mainNode) {\n  if (!mainNode) return '';\n\n  let childTotals = { totalBuy: 0, totalSell: 0 };\n  let craftedFallback = 0;\n  if (mainNode.children && mainNode.children.length > 0) {\n    const totalsFromChildren = getTotals();\n    childTotals.totalBuy = totalsFromChildren.totalBuy;\n    childTotals.totalSell = totalsFromChildren.totalSell;\n    craftedFallback = totalsFromChildren.totalCrafted;\n  }\n  const totals = {\n    totalBuy: childTotals.totalBuy,\n    totalSell: childTotals.totalSell,\n    totalCrafted: mainNode.total_crafted != null\n      ? mainNode.total_crafted\n      : craftedFallback\n  };\n  const buyPriceUnit = mainNode.buy_price || 0;\n  const sellPriceUnit = mainNode.sell_price || 0;\n  const rarityClass = typeof getRarityClass === 'function' ? getRarityClass(mainNode.rarity) : '';\n\n  // IMPORTANTE: usamos el MISMO selector y data que los hijos\n  const expandBtn = `<button class=\"btn-expand-path\" data-path=\"${mainNode._uid}\">${mainNode.expanded ? '-' : '+'}</button>`;\n\n  return `\n    <tr data-state-id=\"${mainNode._uid}\" data-path=\"${mainNode._uid}\" data-item-id=\"${mainNode.id}\" class=\"ingred-row ${mainNode.expanded ? 'expanded' : ''}\">\n      <!-- Col 1: Ícono (SIN colspan) -->\n      <td class=\"th-border-left-items\">\n        <img src=\"${mainNode.icon}\" width=\"32\">\n      </td>\n\n      <!-- Col 2: Nombre -->\n      <td>\n        <span class=\"item-link ${rarityClass}\">${mainNode.name}</span>\n      </td>\n\n      <!-- Col 3: Cantidad -->\n      <td>${mainNode.countTotal != null ? mainNode.countTotal : mainNode.count}</td>\n\n      <!-- Col 4: Total Compra -->\n      <td class=\"item-solo-buy\">\n        <div>${formatGoldColored(totals.totalBuy)}</div>\n        <div class=\"item-solo-precio\">${formatGoldColored(buyPriceUnit)} <span style=\"color:#c99b5b\">c/u</span></div>\n      </td>\n\n      <!-- Col 5: Total Venta -->\n      <td class=\"item-solo-sell\">\n        <div>${formatGoldColored(totals.totalSell)}</div>\n        <div class=\"item-solo-precio\">${formatGoldColored(sellPriceUnit)} <span style=\"color:#c99b5b\">c/u</span></div>\n      </td>\n\n      <!-- Col 6: Total Crafteo -->\n      <td class=\"item-solo-crafted\">\n        <div>${formatGoldColored(totals.totalCrafted)}</div>\n        <div class=\"item-solo-precio\">${formatGoldColored(0)} <span style=\"color:#c99b5b\">c/u</span></div>\n      </td>\n\n      <!-- Col 7: Botón (alineado con hijos) -->\n      <td class=\"th-border-right-items\">${expandBtn}</td>\n    </tr>\n  `;\n}\n\n\n\n// --- Renderizado de la sección 7: Ingredientes para craftear ---\nfunction renderCraftingSectionUI() {\n  const ingList = window.ingredientObjs || [];\n  // Los datos deben estar recalculados antes de llamar a esta función\n\n  // Obtener output_item_count de la receta principal\n  // Cálculo robusto del outputCount como en la comparativa:\n  let outputCount = 1;\n  const mainRoot = ingList.length > 0 ? ingList[0] : null;\n  if (mainRoot && mainRoot.recipe && mainRoot.recipe.output_item_count && !isNaN(mainRoot.recipe.output_item_count)) {\n    outputCount = mainRoot.recipe.output_item_count;\n  } else if (window._mainRecipeOutputCount && !isNaN(window._mainRecipeOutputCount)) {\n    outputCount = window._mainRecipeOutputCount;\n  }\n\n  // --- Totales robustos: getTotals() entrega los totales globales calculados por recalcAll ---\n  // --- Buy/Sell se obtienen de esos totales; el crafteo proviene del nodo raíz ---\n  let totals = { totalBuy: 0, totalSell: 0, totalCrafted: 0 };\n  let childTotals = null;\n  if (mainRoot && mainRoot.children && mainRoot.children.length > 0) {\n    childTotals = getTotals();\n    totals.totalBuy = childTotals.totalBuy;\n    totals.totalSell = childTotals.totalSell;\n  }\n  if (mainRoot) {\n    totals.totalCrafted = mainRoot.total_crafted != null\n      ? mainRoot.total_crafted\n      : (childTotals ? childTotals.totalCrafted : 0);\n  }\n\n  \n\n  const qtyValue = (typeof getQtyInputValue() !== 'undefined' ? getQtyInputValue() : window.globalQty);\n  // Mostrar el precio de mercado directo del ítem (buy_price * cantidad global)\nconst precioCompraTotal = mainRoot && typeof mainRoot.buy_price === 'number' ? mainRoot.buy_price * qtyValue : 0;\n  // Mostrar el precio de mercado directo del ítem (sell_price * cantidad global)\nconst precioVentaTotal = mainRoot && typeof mainRoot.sell_price === 'number' ? mainRoot.sell_price * qtyValue : 0;\n  const precioCraftTotal = totals.totalCrafted;\n  const precioCraftingMinTotal = Math.min(totals.totalBuy, totals.totalSell, totals.totalCrafted);\n  const precioCraftingMinUnidad = outputCount > 0 ? precioCraftingMinTotal / outputCount : precioCraftingMinTotal;\n  const precioCompraUnidad = outputCount > 0 ? totals.totalBuy / outputCount : totals.totalBuy;\n  const precioVentaUnidad = outputCount > 0 ? totals.totalSell / outputCount : totals.totalSell;\n  const precioCraftUnidad = outputCount > 0 ? totals.totalCrafted / outputCount : totals.totalCrafted;\n  const preciosFinales = [precioCompraTotal, precioVentaTotal, precioCraftingMinTotal];\n  const precioMinimoFinal = Math.min(...preciosFinales.filter(x => x > 0));\n  const preciosFinalesUnidad = [precioCompraUnidad, precioVentaUnidad, precioCraftingMinUnidad];\n  const precioMinimoFinalUnidad = Math.min(...preciosFinalesUnidad.filter(x => x > 0));\n  const minIdx = preciosFinales.indexOf(precioMinimoFinal);\n  const minIdxUnidad = preciosFinalesUnidad.indexOf(precioMinimoFinalUnidad);\n  let mensaje = '';\n  if (minIdx === 0) mensaje = 'Mejor comprar (Buy)';\n  else if (minIdx === 1) mensaje = 'Mejor vender (Sell)';\n  else mensaje = 'Mejor craftear (Crafteo)';\n\n  // --- Renderizar tabla de ingredientes con separación de nodo raíz ---\n  // 🔥 Checklist de buenas prácticas de renderizado:\n  // 1. El nodo raíz SOLO se renderiza con renderMainItemRow(mainRoot, 0)\n  // 2. NUNCA debe pasar por renderRows()\n  // 3. Los hijos se renderizan SIEMPRE con renderRows(mainRoot.children, 1)\n  // 4. Prohibido: renderRows([mainRoot], 0)\n  let htmlTabla = '';\n  if (mainRoot) {\n  htmlTabla += renderMainItemRow(mainRoot, 0);\n  // parentId=null para conservar clases \"child-of-null\",\n  // parentExpanded = !!mainRoot.expanded para mostrar/ocultar por el root,\n  // path = [mainRoot._uid] para que los botones hijos construyan bien su ruta\n  htmlTabla += renderRows(mainRoot.children, 1, null, 0, !!mainRoot.expanded, [mainRoot._uid]);\n}\n\n  // 🚫 Nunca hacer: htmlTabla += renderRows([mainRoot], 0); // Esto mostraría mal los totales del nodo raíz\n\n  // Profit\n  let profitHtml = '';\n  let profitHtmlUnidad = '';\n  if (precioVentaTotal > 0) {\n    const ventaTrasComisionTotal = precioVentaTotal - (precioVentaTotal * 0.15);\n    const ventaTrasComisionUnidad = outputCount > 0 ? ventaTrasComisionTotal / outputCount : ventaTrasComisionTotal;\n    const profitBuyUnidad = ventaTrasComisionUnidad - (totals.totalBuy / outputCount);\n    const profitSellUnidad = ventaTrasComisionUnidad - (totals.totalSell / outputCount);\n    const profitCraftedUnidad = ventaTrasComisionUnidad - (totals.totalCrafted / outputCount);\n    const profitBuyTotal = ventaTrasComisionTotal - totals.totalBuy;\n    const profitSellTotal = ventaTrasComisionTotal - totals.totalSell;\n    const profitCraftedTotal = ventaTrasComisionTotal - totals.totalCrafted;\n    if (outputCount === 1) {\n      profitHtml = `<section id='profit-section'><br>\n        <div class=\"table-modern-totales\">\n        <div class=\"titulo-con-ayuda\">\n          <div class=\"ayuda-tooltip\">?\n            <span class=\"tooltiptext-modern\"> Esta sección muestra la ganancia estimada al vender el ítem después de craftearlo. Se calcula como: (Precio venta - 15% comisión) - costo total de crafteo. También muestra 3 posibles resultados dependiendo de la forma de craftear.</span>\n          </div>\n          <h3>Profit si se craftea y se vende (ganancia estimada)</h3>\n        </div>\n        <table class='table-totales totales-crafting-comparativa' style='margin-bottom: 8px;'>\n          <tr style='text-align:center;'>\n            <td><div class='base-comparativa'>${formatGoldColored(Math.round(profitBuyTotal))} <br><span style='font-size:0.93em;'>Profit \"Comprar\"</span></div></td>\n            <td><div class='base-comparativa'>${formatGoldColored(Math.round(profitSellTotal))} <br><span style='font-size:0.93em;'>Profit \"Vender\"</span></div></td>\n            <td><div class='base-comparativa'>${formatGoldColored(Math.round(profitCraftedTotal))} <br><span style='font-size:0.93em;'>Profit \"Craftear\"</span></div></td>\n          </tr>\n          <tr><td colspan='3' style='text-align:center;font-size:0.98em;color:#a1a1aa;'>La ganancia se calcula como: (Precio venta - 15% comisión) - costo total</td></tr>\n        </table>\n      </div>\n      </section>`;\n    }\n    if (outputCount > 1) {\n      const precioVentaUnidadMercado = (_mainSellPrice != null) ? _mainSellPrice : 0;\n      const ventaTrasComisionUnidadMercado = precioVentaUnidadMercado - (precioVentaUnidadMercado * 0.15);\n      const profitBuyUnidadMercado = ventaTrasComisionUnidadMercado - (totals.totalBuy / outputCount);\n      const profitSellUnidadMercado = ventaTrasComisionUnidadMercado - (totals.totalSell / outputCount);\n      const profitCraftedUnidadMercado = ventaTrasComisionUnidadMercado - (totals.totalCrafted / outputCount);\n      profitHtmlUnidad = `<section id='profit-section-unidad'><br>\n        <div class=\"table-modern-totales\">          \n        <h3>Profit si se craftea y se vende por UNIDAD (ganancia estimada)</h3>\n        <div style='margin-bottom:8px;color:#a1a1aa;font-size:1em;'>Esta receta produce <b>${outputCount}</b> unidades por crafteo. Los siguientes cálculos son por unidad.</div>\n        <table class='table-totales totales-crafting-comparativa' style='margin-bottom: 8px;'>\n          <tr style='text-align:center;'>\n            <td><div class='base-comparativa'>${formatGoldColored(Math.round(profitBuyUnidadMercado))} <br><span style='font-size:0.93em;'>Profit \"Comprar\"</span></div></td>\n            <td><div class='base-comparativa'>${formatGoldColored(Math.round(profitSellUnidadMercado))} <br><span style='font-size:0.93em;'>Profit \"Vender\"</span></div></td>\n            <td><div class='base-comparativa'>${formatGoldColored(Math.round(profitCraftedUnidadMercado))} <br><span style='font-size:0.93em;'>Profit \"Craftear\"</span></div></td>\n          </tr>\n          <tr><td colspan='3' style='text-align:center;font-size:0.98em;color:#a1a1aa;'>La ganancia por unidad se calcula como: (Precio venta unitario - 15% comisión) - costo unitario</td></tr>\n        </table>\n      </div>\n      </section>`;\n    }\n  }\n\n  // --- Insertar tabla de ingredientes en el HTML ---\n  let tablaIngredientes = `<table class=\"table-crafting\" id=\"tabla-crafting\">\n    <thead class=\"header-items\">\n      <tr>\n        <th class=\"th-border-left-items\"></th>\n        <th>Nombre</th>\n        <th>Cantidad</th>\n        <th>Total Compra</th>\n        <th>Total Venta</th>\n        <th>Total Crafteo</th>\n        <th class=\"th-border-right-items\"></th>\n      </tr>\n    </thead>\n    <tbody>\n      ${htmlTabla}\n    </tbody>\n  </table>`;\n\n  // Tablas de totales\n  // Input SIEMPRE antes de la tabla de ingredientes\n  let inputQtyHtml = `<div id=\"qty-global-container\" style=\"margin:18px 0 18px 0;display:flex;align-items:center;gap:12px;\">\n    <label for=\"qty-global\" style=\"font-weight:500;\">Cantidad global:</label>\n    <input id=\"qty-global\" type=\"number\" min=\"1\" value=\"${qtyValue}\" style=\"width:60px;height:36px;\" autocomplete=\"off\">\n  </div>`;\n  let tablaTotales = `<div class=\"table-modern-totales\">\n    <div class=\"titulo-con-ayuda\">\n      <div class=\"ayuda-tooltip\">?\n        <span class=\"tooltiptext-modern\">Esta sección muestra el costo total de los materiales necesarios para craftear el ítem. Con costo de materiales en venta directa, pedido y crafteo de sus propio materiales.</span>\n      </div>\n      <h3>Precio total materiales - Crafting</h3>\n    </div>\n    <div id=\"totales-crafting\">      \n      <table class=\"table-totales\" style=\"margin-top:12px;\">\n        <tr>\n          <th><div class=\"tooltip-modern\">Total Compra\n            <span class=\"tooltiptext-modern\">Suma total si haces PEDIDO de materiales en el mercado.</span>\n          </div></th>\n          <td class=\"item-solo-buy\">${formatGoldColored(totals.totalBuy)} </td>\n          <th><div class=\"tooltip-modern\">Total Venta\n            <span class=\"tooltiptext-modern\">Suma total si COMPRAS materiales en el mercado.</span>\n          </div></th>\n          <td class=\"item-solo-sell\">${formatGoldColored(totals.totalSell)}</td>\n          <th><div class=\"tooltip-modern\">Total Crafteo\n            <span class=\"tooltiptext-modern\">Suma total si CRAFTEAS todos los materiales posibles desde cero.</span>\n          </div></th>\n          <td class=\"item-solo-crafted\">${formatGoldColored(totals.totalCrafted)}</td>\n        </tr>\n      </table>\n    </div>\n    </div>`;\n  let tablaTotalesUnidad = '';\n  if (outputCount > 1) {\n    tablaTotalesUnidad = `<div class=\"table-modern-totales\">\n    <div class=\"titulo-con-ayuda\">\n      <div class=\"ayuda-tooltip\">?\n        <span class=\"tooltiptext-modern\">Muestra el costo por unidad ya que esta receta produce múltiples ítems</span>\n      </div>\n      <h3>Costos por unidad (${outputCount} unidades por crafteo)</h3>\n    </div>\n    <div style='margin-bottom:8px;color:#a1a1aa;font-size:1em;'>Esta receta produce <b>${outputCount}</b> unidades por crafteo.</div>\n      <div id=\"totales-crafting\">\n        <table class=\"table-totales\" style=\"margin-top:12px;\">\n          <tr>\n            <th><div class=\"tooltip-modern\">Total Compra\n              <span class=\"tooltiptext-modern\">Suma total si haces PEDIDO de materiales en el mercado.</span>\n            </div></th>\n            <td class=\"item-solo-buy\">${formatGoldColored(totals.totalBuy / outputCount)}</td>\n            <th><div class=\"tooltip-modern\">Total Venta\n              <span class=\"tooltiptext-modern\">Suma total si COMPRAS materiales en el mercado.</span>\n            </div></th>\n            <td class=\"item-solo-sell\">${formatGoldColored(totals.totalSell / outputCount)}</td>\n            <th><div class=\"tooltip-modern\">Total Crafteo\n              <span class=\"tooltiptext-modern\">Suma total si CRAFTEAS todos los materiales posibles desde cero.</span>\n            </div></th>\n            <td class=\"item-solo-crafted\">${formatGoldColored(totals.totalCrafted / outputCount)}</td>\n          </tr>\n        </table>\n      </div>\n    </div>`;\n  }\n\n  let tablaComparativa = '';\n  let tablaComparativaUnidad = '';\n  // Generar tabla comparativa antes del return\n  if (outputCount === 1) {\n    tablaComparativa = `<section id='comparativa-section'>\n      <div class=\"table-modern-totales\">\n        <div class=\"titulo-con-ayuda\">\n          <div class=\"ayuda-tooltip\">?\n            <span class=\"tooltiptext-modern\"> Esta sección compara el precio de compra directa y pedido en el mercado con el costo de crafteo más bajo.</span>\n          </div>\n          <h3>Comparativa de precios de Bazar vs Crafting</h3>\n        </div>\n        <br>\n        <table class='table-totales totales-crafting-comparativa'>\n          <tr style='text-align:center;'>\n            <td><div class='base-comparativa' style='${minIdx===0 ? 'background:#e84d4d33;' : ''}'>${formatGoldColored(precioCompraTotal)} <br><span style='font-size:0.93em;'>Precio compra</span></div></td>\n            <td><div class='base-comparativa' style='${minIdx===1 ? 'background:#4db1e833;' : ''}'>${formatGoldColored(precioVentaTotal)} <br><span style='font-size:0.93em;'>Precio venta</span></div></td>\n            <td><div class='base-comparativa' style='${minIdx===2 ? 'background:#4fc17833;' : ''}'>${formatGoldColored(precioCraftingMinTotal)} <br><span style='font-size:0.93em;'>Precio crafting más bajo</span></div></td>\n          </tr>\n          <tr><td colspan='3' style='text-align:center;font-size:1.07em;'>${mensaje}</td></tr>\n        </table>\n      </div>\n      </section>`;\n  }\n  if (outputCount > 1) {\n    const globalQty = window.globalQty || 1;\n    const precioCompraUnidadMercado = (_mainBuyPrice != null) ? _mainBuyPrice * globalQty : 0;\n    const precioVentaUnidadMercado = (_mainSellPrice != null) ? _mainSellPrice * globalQty : 0;\n    const precioCraftingMinUnidadReal = outputCount > 0 ? precioCraftingMinTotal / outputCount : precioCraftingMinTotal;\n    const preciosUnidadCorr = [precioCompraUnidadMercado, precioVentaUnidadMercado, precioCraftingMinUnidadReal];\n    const precioMinimoUnidadReal = Math.min(...preciosUnidadCorr.filter(x => x > 0));\n    const minIdxUnidad = preciosUnidadCorr.indexOf(precioMinimoUnidadReal);\n    tablaComparativaUnidad = `<section id='comparativa-section-unidad'>\n      <div class=\\\"table-modern-totales\\\"><br>\n        <h3>Comparativa de precios de Bazar vs Crafting por UNIDAD</h3>\n        <div style='margin-bottom:8px;color:#a1a1aa;font-size:1em;'>Esta receta produce <b>${outputCount}</b> unidades por crafteo. Los siguientes precios son por unidad.</div>\n        <table class='table-totales totales-crafting-comparativa'>\n          <tr style='text-align:center;'>\n            <td><div style='${minIdxUnidad===0 ? 'background:#e84d4d33;font-weight:bold;border-radius:6px;padding:10px;' : ''}'>${formatGoldColored(precioCompraUnidadMercado)} <br><span style='font-size:0.93em;'>Precio compra</span></div></td>\n            <td><div style='${minIdxUnidad===1 ? 'background:#4db1e833;font-weight:bold;border-radius:6px;padding:10px;' : ''}'>${formatGoldColored(precioVentaUnidadMercado)} <br><span style='font-size:0.93em;'>Precio venta</span></div></td>\n            <td><div style='${minIdxUnidad===2 ? 'background:#4fc17833;font-weight:bold;border-radius:6px;padding:10px;' : ''}'>${formatGoldColored(precioCraftingMinUnidadReal)} <br><span style='font-size:0.93em;'>Precio crafting más bajo</span></div></td>\n          </tr>\n          <tr><td colspan='3' style='text-align:center;font-size:1.07em;'>${mensaje}</td></tr>\n        </table>\n      </div>\n      </section>`;\n  }\n\n  // HTML FINAL\n  let htmlFinal = `\n    ${inputQtyHtml}\n    <table class=\"table-modern tabla-tarjetas\">\n      <thead class=\"header-items\">\n        <tr>\n          <th class=\"th-border-left\">Ícono</th>\n          <th>Nombre</th>\n          <th>Cantidad</th>\n          <th>Total Compra</th>\n          <th>Total Venta</th>\n          <th>Total Crafteo</th>\n          <th class=\"th-border-right\"></th>\n        </tr>\n      </thead>\n      <!-- 👇 Aquí va la tabla correcta: root + hijos -->\n      <tbody>${htmlTabla}</tbody>\n    </table>\n    ${tablaTotales}\n    ${outputCount > 1 ? tablaTotalesUnidad : ''}\n    ${tablaComparativa}\n    ${outputCount > 1 ? tablaComparativaUnidad : ''}\n    ${profitHtml}\n    ${outputCount > 1 ? profitHtmlUnidad : ''}\n  `;\n  return htmlFinal;\n}\n\n// --- Renderizado principal refactorizado ---\nasync function renderItemUI(itemData, marketData) {\n  // console.log('%cLEGACY renderItemUI ejecutado', 'color: #f44336; font-weight: bold;', itemData);\n\n  const itemHeader = document.getElementById('item-header');\n  // Verificar si hay información de artesanía\n  let craftingInfo = '';\n  if (itemData.details?.disciplines?.length > 0 || itemData.details?.min_rating > 0) {\n    const disciplineNames = {\n      'Artificer': 'Artesano',\n      'Armorsmith': 'Armero',\n      'Chef': 'Cocinero',\n      'Huntsman': 'Cazador',\n      'Jeweler': 'Joyero',\n      'Leatherworker': 'Peletero',\n      'Tailor': 'Sastre',\n      'Weaponsmith': 'Armero de armas',\n      'Scribe': 'Escriba'\n    };\n\n    const translatedDisciplines = (itemData.details.disciplines || [])\n      .map(d => disciplineNames[d] || d);\n\n    craftingInfo = `\n      <div style=\"margin-top: 4px; color: #a1a1aa; font-size: 0.95rem;\">\n        ${itemData.details.min_rating ? `<span style=\"color: #16c198; font-weight: 500;\">Nivel:</span> ${itemData.details.min_rating} ` : ''}\n        ${translatedDisciplines.length > 0 ? \n          `<span style=\"color: #16c198; font-weight: 500;\">${itemData.details.min_rating ? '• ' : ''}Disciplinas:</span> ${translatedDisciplines.join(', ')}` : ''}\n      </div>\n    `;\n  }\n\n  const rarityClass = typeof getRarityClass === 'function' ? getRarityClass(itemData.rarity) : '';\n  itemHeader.innerHTML = `\n    <img src=\"${itemData.icon}\" alt=\"\"/>\n    <div>\n      <h2 class=\"${rarityClass}\">${itemData.name}</h2>\n      <div style=\"color:#a1a1aa;font-size:1.05rem;\">\n        ID: ${itemData.id} &nbsp;|&nbsp; ${itemData.type} ${itemData.rarity ? ' - ' + itemData.rarity : ''}\n      </div>\n      ${craftingInfo}\n    </div>\n  `;\n\n  // Precios\n  const precios = `\n    <table class=\"table-modern\">\n      <tr>\n        <th><div class=\"dato-item tooltip-modern\">Precio de compra\n          <span class=\"tooltiptext-modern\">Precio al que los compradores están dispuestos a adquirir el ítem (mejor oferta de compra).</span>\n        </div></th>\n        <td><div class=\"dato-item-info\">${formatGoldColored(marketData.buy_price)}</div></td>\n      </tr>\n      <tr>\n        <th><div class=\"dato-item tooltip-modern\">Precio de venta\n          <span class=\"tooltiptext-modern\">Precio al que los vendedores ofrecen el ítem (mejor oferta de venta).</span>\n        </div></th>\n        <td><div class=\"dato-item-info\">${formatGoldColored(marketData.sell_price)}</div></td>\n      </tr>\n      <tr>\n        <th><div class=\"dato-item tooltip-modern\">Disponibles para vender\n          <span class=\"tooltiptext-modern\">Cantidad total de ítems listados actualmente para vender en el mercado.</span>\n        </div></th>\n        <td><div class=\"dato-item-info\">${marketData.sell_quantity ?? '-'}</div></td>\n      </tr>\n      <tr>\n        <th><div class=\"dato-item tooltip-modern\">Disponibles para comprar\n          <span class=\"tooltiptext-modern\">Cantidad total de ítems que los compradores buscan adquirir en el mercado.</span>\n        </div></th>\n        <td><div class=\"dato-item-info\">${marketData.buy_quantity ?? '-'}</div></td>\n      </tr>\n    </table>\n  `;\n  // --- Renderizar resumen de mercado SOLO en #resumen-mercado ---\n  const resumenMercadoDiv = document.getElementById('resumen-mercado');\n\n  if (resumenMercadoDiv) {\n    const skeletonMarket = document.createElement('div');\n    skeletonMarket.classList.add('skeleton', 'skeleton-market-summary');\n    resumenMercadoDiv.appendChild(skeletonMarket);\n\n    observeSection(resumenMercadoDiv, () => {\n      hideSkeleton(skeletonMarket);\n      resumenMercadoDiv.insertAdjacentHTML('beforeend', renderResumenMercado(marketData));\n    });\n  }\n\n  // --- Renderizar SOLO crafting en #info-item ---\n  const infoItemDiv = document.getElementById('info-item');\n\n  if (infoItemDiv) {\n    // 🔥 Recalcular todos los ingredientes ANTES de renderizar la UI\n    if (window.ingredientObjs && window.ingredientObjs.length > 0) {\n      await recalcAll(window.ingredientObjs, window.globalQty);\n    }\n    infoItemDiv.innerHTML = `\n      <div id=\\\"seccion-totales\\\"></div>\n      <div id=\\\"seccion-comparativa\\\"></div>\n      <div id=\\\"seccion-crafting\\\"></div>\n    `;\n    document.getElementById('seccion-totales').innerHTML = '';\n    document.getElementById('seccion-comparativa').innerHTML = '';\n    document.getElementById('seccion-crafting').innerHTML = renderCraftingSectionUI();\n    document.querySelectorAll('#seccion-crafting tr[data-state-id]').forEach(row => {\n      const id = row.getAttribute('data-state-id');\n      register(id, row, (ing) => {\n        const buyCell = row.querySelector('.item-solo-buy');\n        if (buyCell) buyCell.innerHTML = `<div>${formatGoldColored(ing.total_buy)}</div><div class=\"item-solo-precio\">${formatGoldColored(ing.buy_price)} <span style=\"color: #c99b5b\">c/u</span></div>`;\n        const sellCell = row.querySelector('.item-solo-sell');\n        if (sellCell) sellCell.innerHTML = `<div>${formatGoldColored(ing.total_sell)}</div><div class=\"item-solo-precio\">${formatGoldColored(ing.sell_price)} <span style=\"color: #c99b5b\">c/u</span></div>`;\n        const craftedCell = row.querySelector('.item-solo-crafted');\n        if (craftedCell) craftedCell.innerHTML =\n          `<div>${formatGoldColored(ing.total_crafted || 0)}</div>` +\n          `<div class=\"item-solo-precio\">${formatGoldColored(0)} <span style=\"color:#c99b5b\">c/u</span></div>`;\n      });\n    });\n    requestAnimationFrame(() => {\n      initLazyImages();\n      setTimeout(initLazyImages, 0); // salvaguarda\n    });\n  }\n\n\n\n  renderWiki(itemData.name);\n  installUIEvents();\n}\n\n// --- Instalación de eventos y render seguro ---\nfunction installUIEvents() {\n  // Evitar doble instalación\n  if (window._uiEventsInstalled) return;\n  window._uiEventsInstalled = true;\n  \n  // console.log('[INIT] installUIEvents llamada');\n  \n  // Handler input cantidad global - LÓGICA IDÉNTICA A compare-ui.js\n  if (!window._qtyGlobalHandlerInstalled) {\n    window._qtyGlobalHandlerInstalled = true;\n    // INPUT: permite escribir varios dígitos, no fuerza recalculo salvo que sea válido\n    document.addEventListener('input', function(e) {\n      if (e.target && e.target.id === 'qty-global') {\n        window._qtyInputValue = e.target.value;\n        // NO recalcula, NO renderiza, NO actualiza globalQty aquí\n      }\n    });\n    // BLUR: si el valor es inválido, lo pone en 1\n    document.addEventListener('blur', function(e) {\n      if (e.target && e.target.id === 'qty-global') {\n        const input = e.target;\n        let val = parseInt(input.value, 10);\n        if (isNaN(val) || val < 1) {\n          setGlobalQty(1);\n          window._qtyInputValue = '1';\n        } else {\n          setGlobalQty(val);\n          window._qtyInputValue = input.value;\n        }\n        if (typeof window._qtyInputValue !== 'undefined' && String(window._qtyInputValue) === String(window.globalQty)) {\n          delete window._qtyInputValue;\n        }\n        safeRenderTable();\n      }\n    }, true);\n    // ENTER: igual que blur\n    document.addEventListener('keydown', function(e) {\n      if (e.target && e.target.id === 'qty-global' && (e.key === 'Enter')) {\n        e.preventDefault(); // Evita salto de línea o submit\n        const input = e.target;\n        let val = parseInt(input.value, 10);\n        if (isNaN(val) || val < 1) {\n          setGlobalQty(1);\n          window._qtyInputValue = '1';\n        } else {\n          setGlobalQty(val);\n          window._qtyInputValue = input.value;\n        }\n        if (typeof window._qtyInputValue !== 'undefined' && String(window._qtyInputValue) === String(window.globalQty)) {\n          delete window._qtyInputValue;\n        }\n        safeRenderTable();\n      }\n    });\n  }\n\n  // Manejador centralizado para los radios de modo\n  document.addEventListener('change', async function(e) {\n    const input = e.target;\n    if (!input.matches('.chk-mode-buy, .chk-mode-sell, .chk-mode-crafted')) return;\n  \n    const uid = input.dataset.uid;\n    if (!uid) return;\n    const ing = findIngredientByUid(window.ingredientObjs || [], uid);\n    if (!ing) return;\n  \n    if (input.classList.contains('chk-mode-buy')) {\n      ing.modeForParentCrafted = 'buy';\n    } else if (input.classList.contains('chk-mode-sell')) {\n      ing.modeForParentCrafted = 'sell';\n    } else if (input.classList.contains('chk-mode-crafted')) {\n      ing.modeForParentCrafted = 'crafted';\n    }\n\n    await safeRenderTable();\n  });\n\n  // Handler global para expandir/colapsar ingredientes hijos por data-path\n  document.addEventListener('click', function(e) {\n    const btn = e.target.closest('.btn-expand-path');\n    if (!btn) return;\n    const pathStr = btn.getAttribute('data-path');\n    if (!pathStr) return;\n    const path = pathStr.split('-').map(x => x.trim());\n    const ing = findIngredientByPath(window.ingredientObjs || [], path);\n    if (ing) {\n      ing.expanded = !ing.expanded;\n      if (typeof safeRenderTable === 'function') safeRenderTable();\n    }\n  });\n}\n\n\n\n\n// --- Inicialización de eventos y render seguro ---\nasync function safeRenderTable() {\n  // Siempre recalcula y renderiza la sección de ingredientes y totales.\n  await recalcAll(window.ingredientObjs || [], window.globalQty);\n\n  const seccion = document.getElementById('seccion-crafting');\n  if (seccion) {\n    // Guardar el valor actual del input y el estado de los expandibles\n    const qtyInput = document.getElementById('qty-global');\n    const currentQty = qtyInput ? qtyInput.value : window.globalQty;\n    const expandedStates = snapshotExpandState(window.ingredientObjs || []);\n\n    // Renderizar de nuevo toda la sección\n    seccion.innerHTML = renderCraftingSectionUI();\n    document.querySelectorAll('#seccion-crafting tr[data-state-id]').forEach(row => {\n      const id = row.getAttribute('data-state-id');\n      register(id, row, (ing) => {\n        const buyCell = row.querySelector('.item-solo-buy');\n        if (buyCell) {\n          const buyTotal = buyCell.querySelector('div:first-child');\n          const buyUnit = buyCell.querySelector('.item-solo-precio');\n          if (buyTotal) buyTotal.innerHTML = formatGoldColored(ing.total_buy);\n          if (buyUnit) buyUnit.innerHTML = `${formatGoldColored(ing.buy_price)} <span style=\"color: #c99b5b\">c/u</span>`;\n        }\n        const sellCell = row.querySelector('.item-solo-sell');\n        if (sellCell) {\n          const sellTotal = sellCell.querySelector('div:first-child');\n          const sellUnit = sellCell.querySelector('.item-solo-precio');\n          if (sellTotal) sellTotal.innerHTML = formatGoldColored(ing.total_sell);\n          if (sellUnit) sellUnit.innerHTML = `${formatGoldColored(ing.sell_price)} <span style=\"color: #c99b5b\">c/u</span>`;\n        }\n        const craftedCell = row.querySelector('.item-solo-crafted');\n        if (craftedCell) {\n          const craftedTotal = craftedCell.querySelector('div:first-child');\n          const craftedUnit = craftedCell.querySelector('.item-solo-precio');\n          if (craftedTotal) craftedTotal.innerHTML = formatGoldColored(ing.total_crafted || 0);\n          if (craftedUnit) craftedUnit.innerHTML = `${formatGoldColored(0)} <span style=\"color:#c99b5b\">c/u</span>`;\n        }\n      });\n    });\n\n    // Registrar nodos de totales para actualizaciones incrementales\n    document.querySelectorAll('#totales-crafting').forEach(totEl => {\n      const isUnit = totEl.closest('.table-modern-totales')\n        ?.querySelector('h3')\n        ?.textContent?.includes('unidad');\n      const stateId = isUnit ? 'totales-crafting-unit' : 'totales-crafting-global';\n      register(stateId, totEl, (totals) => {\n        const divisor = isUnit\n          ? (window._mainRecipeOutputCount && !isNaN(window._mainRecipeOutputCount)\n            ? window._mainRecipeOutputCount\n            : 1)\n          : 1;\n        const buyCell = totEl.querySelector('.item-solo-buy');\n        if (buyCell) buyCell.innerHTML = formatGoldColored(totals.totalBuy / divisor);\n        const sellCell = totEl.querySelector('.item-solo-sell');\n        if (sellCell) sellCell.innerHTML = formatGoldColored(totals.totalSell / divisor);\n        const craftedCell = totEl.querySelector('.item-solo-crafted');\n        if (craftedCell) craftedCell.innerHTML = formatGoldColored(totals.totalCrafted / divisor);\n      });\n    });\n    const totals = getTotals();\n    updateState('totales-crafting-global', totals);\n    updateState('totales-crafting-unit', totals);\n\n    // Restaurar el valor del input y el estado de los expandibles\n    const newQtyInput = document.getElementById('qty-global');\n    if (newQtyInput) {\n      newQtyInput.value = currentQty;\n    }\n    restoreExpandState(window.ingredientObjs || [], expandedStates);\n    requestAnimationFrame(() => {\n      initLazyImages();\n      setTimeout(initLazyImages, 0); // salvaguarda\n    });\n  }\n}\nwindow.safeRenderTable = safeRenderTable;\n  // Re-sincronizar el input de cantidad global\n  setTimeout(() => {\n    setQtyInputValue(window.globalQty);\n    const input = document.getElementById('qty-global');\n\n    if (input) {\n      // Debug opcional sobre cambios en el input\n      // input.addEventListener('input', (e) => {\n      //   console.log('[DEBUG] input qty-global changed:', e.target.value);\n      // });\n      // input.addEventListener('change', (e) => {\n      //   console.log('[DEBUG] change qty-global:', e.target.value);\n      // });\n    }\n  }, 0);\n\n  // --- FIX: Instalar listeners de expand/collapse tras renderizar ---\n  setTimeout(() => {\n    if (typeof installUIEvents === 'function') {\n      installUIEvents();\n\n    } else {\n      console.warn('[ADVERTENCIA] installUIEvents no está definido');\n    }\n  }, 0);\n\n// --- Inicialización principal ---\n// --- Exportaciones ---\nasync function initItemUI(itemData, marketData) {\n  window._lastItemData = itemData;\n  window._lastMarketData = marketData;\n  const skeleton = document.getElementById('item-skeleton');\n  hideError();\n  try {\n    await renderItemUI(itemData, marketData);\n  } finally {\n    hideSkeleton(skeleton);\n  }\n}\n\nwindow.showSkeleton = showSkeleton;\nwindow.hideSkeleton = hideSkeleton;\nwindow.showError = showError;\nwindow.hideError = hideError;\nwindow.renderItemUI = renderItemUI;\nwindow.installUIEvents = installUIEvents;\nwindow.initItemUI = initItemUI;\n\nfunction renderResumenMercado(marketData) {\n  return `\n      <table class=\"table-modern\">\n        <tr>\n          <th><div class=\"dato-item tooltip-modern\">Precio de compra\n            <span class=\"tooltiptext-modern\">Precio al que los compradores están dispuestos a adquirir el ítem (mejor oferta de compra).</span>\n          </div></th>\n          <td><div class=\"dato-item-info\">${formatGoldColored(marketData.buy_price)}</div></td>\n        </tr>\n        <tr>\n          <th><div class=\"dato-item tooltip-modern\">Precio de venta\n            <span class=\"tooltiptext-modern\">Precio al que los vendedores ofrecen el ítem (mejor oferta de venta).</span>\n          </div></th>\n          <td><div class=\"dato-item-info\">${formatGoldColored(marketData.sell_price)}</div></td>\n        </tr>\n        <tr>\n          <th><div class=\"dato-item tooltip-modern\">Disponibles para vender\n            <span class=\"tooltiptext-modern\">Cantidad total de ítems listados actualmente para vender en el mercado.</span>\n          </div></th>\n          <td><div class=\"dato-item-info\">${marketData.sell_quantity ?? '-'}</div></td>\n        </tr>\n        <tr>\n          <th><div class=\"dato-item tooltip-modern\">Disponibles para comprar\n            <span class=\"tooltiptext-modern\">Cantidad total de ítems que los compradores buscan adquirir en el mercado.</span>\n          </div></th>\n          <td><div class=\"dato-item-info\">${marketData.buy_quantity ?? '-'}</div></td>\n        </tr>\n      </table>\n      <section id=\"ventas-compras\" class=\"bloque-section\">\n        <h3>Ventas y Compras Recientes</h3>\n        <table class=\"table-modern\">\n          <tr><th></th><th style=\"text-align:center;\">1 día</th><th style=\"text-align:center;\">2 días</th><th style=\"text-align:center;\">7 días</th><th style=\"text-align:center;\">1 mes</th></tr>\n          <tr>\n            <th><div class=\"dato-item tooltip-modern\">Ventas\n                <span class=\"tooltiptext-modern\">Cantidad de ítems comprados directamente en el periodo (actividad de salida del mercado).</span>\n                </div>\n            </th>\n            <td><div class=\"dato-item-info\">${marketData['1d_sell_sold'] ?? '-'}</div></td>\n            <td><div class=\"dato-item-info\">${marketData['2d_sell_sold'] ?? '-'}</div></td>\n            <td><div class=\"dato-item-info\">${marketData['7d_sell_sold'] ?? '-'}</div></td>\n            <td><div class=\"dato-item-info\">${marketData['1m_sell_sold'] ?? '-'}</div></td>\n          </tr>\n          <tr>\n            <th><div class=\"dato-item tooltip-modern\">Compras\n                <span class=\"tooltiptext-modern\">Cantidad de ítems vendidos directamente en el periodo (actividad de entrada al mercado).</span>\n                </div></th>\n            <td><div class=\"dato-item-info\">${marketData['1d_buy_sold'] ?? '-'}</div></td>\n            <td><div class=\"dato-item-info\">${marketData['2d_buy_sold'] ?? '-'}</div></td>\n            <td><div class=\"dato-item-info\">${marketData['7d_buy_sold'] ?? '-'}</div></td>\n            <td><div class=\"dato-item-info\">${marketData['1m_buy_sold'] ?? '-'}</div></td>\n          </tr>\n          <tr><td colspan=\"5\" style=\"color:#888;font-size:0.95em;\">* Basado en actividad reciente.</td></tr>\n        </table>\n      </section>\n      <section id=\"porcentajes-rotacion\" class=\"bloque-section\">\n        <h3>Porcentajes de Rotación</h3>\n        <table class=\"table-modern\">\n          <tr><th></th><th style=\"text-align:center;\">1 día</th><th style=\"text-align:center;\">2 días</th><th style=\"text-align:center;\">7 días</th><th style=\"text-align:center;\">1 mes</th></tr>\n          <tr>\n            <th><div class=\"dato-item tooltip-modern\">Ventas/Supply\n                <span class=\"tooltiptext-modern\">Porcentaje de ítems comprados directamente respecto al total disponible (rotación de inventario en el mercado).</span>\n                </div></th>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['1d_sell_sold'], marketData.sell_quantity)}</div></td>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['2d_sell_sold'], marketData.sell_quantity)}</div></td>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['7d_sell_sold'], marketData.sell_quantity)}</div></td>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['1m_sell_sold'], marketData.sell_quantity)}</div></td>\n          </tr>\n          <tr>\n            <th><div class=\"dato-item tooltip-modern\">Compras/Demand\n                <span class=\"tooltiptext-modern\">Porcentaje de ítems vendidos directamente respecto a la demanda total (flujo de entrada al mercado).</span>\n                </div></th>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['1d_buy_sold'], marketData.buy_quantity)}</div></td>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['2d_buy_sold'], marketData.buy_quantity)}</div></td>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['7d_buy_sold'], marketData.buy_quantity)}</div></td>\n            <td><div class=\"dato-item-info\">${calcPercent(marketData['1m_buy_sold'], marketData.buy_quantity)}</div></td>\n          </tr>\n          <tr><td colspan=\"5\" style=\"color:#888;font-size:0.95em;\">* Basado en actividad reciente comparada con la cantidad disponible.</td></tr>\n        </table>\n      </section>\n  `;\n}\n"],"names":["renderRows","ings","nivel","parentId","rowGroupIndex","parentExpanded","path","map","ing","idx","groupIdx","rowBgClass","indent","id","currentPath","_uid","join","expandButton","is_craftable","children","length","expanded","isChild","extraClass","extraStyle","noMarketPrice","buy_price","sell_price","hasChildren","showCrafted","total_crafted","rarityClass","getRarityClass","rarity","icon","name","countTotal","count","formatGoldColored","total_buy","modeForParentCrafted","total_sell","renderMainItemRow","mainNode","childTotals","totalBuy","totalSell","craftedFallback","totalsFromChildren","getTotals","totalCrafted","totals","buyPriceUnit","sellPriceUnit","expandBtn","renderCraftingSectionUI","ingList","window","ingredientObjs","outputCount","mainRoot","recipe","output_item_count","isNaN","_mainRecipeOutputCount","qtyValue","getQtyInputValue","globalQty","precioCompraTotal","precioVentaTotal","precioCraftingMinTotal","Math","min","preciosFinales","precioMinimoFinal","filter","x","minIdx","indexOf","mensaje","htmlTabla","profitHtml","profitHtmlUnidad","ventaTrasComisionTotal","profitBuyTotal","profitSellTotal","profitCraftedTotal","round","precioVentaUnidadMercado","_mainSellPrice","ventaTrasComisionUnidadMercado","profitBuyUnidadMercado","profitSellUnidadMercado","profitCraftedUnidadMercado","inputQtyHtml","tablaTotales","tablaTotalesUnidad","tablaComparativa","tablaComparativaUnidad","precioCompraUnidadMercado","_mainBuyPrice","precioCraftingMinUnidadReal","preciosUnidadCorr","precioMinimoUnidadReal","minIdxUnidad","async","renderItemUI","itemData","marketData","itemHeader","document","getElementById","craftingInfo","details","disciplines","min_rating","disciplineNames","Artificer","Armorsmith","Chef","Huntsman","Jeweler","Leatherworker","Tailor","Weaponsmith","Scribe","translatedDisciplines","d","innerHTML","type","sell_quantity","buy_quantity","resumenMercadoDiv","skeletonMarket","createElement","classList","add","appendChild","observeSection","hideSkeleton","insertAdjacentHTML","calcPercent","renderResumenMercado","infoItemDiv","recalcAll","querySelectorAll","forEach","row","getAttribute","register","buyCell","querySelector","sellCell","craftedCell","requestAnimationFrame","initLazyImages","setTimeout","nombre","encodeURIComponent","replaceAll","wikiES","wikiEN","wikiLinksEl","renderWiki","installUIEvents","_uiEventsInstalled","_qtyGlobalHandlerInstalled","addEventListener","e","target","_qtyInputValue","value","input","val","parseInt","setGlobalQty","String","safeRenderTable","key","preventDefault","matches","uid","dataset","findIngredientByUid","contains","btn","closest","pathStr","split","trim","findIngredientByPath","seccion","qtyInput","currentQty","expandedStates","snapshotExpandState","buyTotal","buyUnit","sellTotal","sellUnit","craftedTotal","craftedUnit","totEl","isUnit","textContent","includes","divisor","updateState","newQtyInput","restoreExpandState","setQtyInputValue","showSkeleton","showError","hideError","initItemUI","_lastItemData","_lastMarketData","skeleton"],"mappings":"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"}