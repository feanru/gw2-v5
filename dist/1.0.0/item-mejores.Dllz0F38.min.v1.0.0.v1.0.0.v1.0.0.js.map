{"version":3,"file":"item-mejores.Dllz0F38.min.js","sources":["../../src/js/item-mejores.js"],"sourcesContent":["// js/item-mejores.js\n// Estructura base para análisis avanzado de ítems GW2\n// Mantiene la arquitectura y estilos compatibles con item.html y compare-craft\n\nimport { getCached, setCached } from './utils/cache.js';\nimport { fetchWithCache } from './utils/requestCache.js';\n\n// Referencias a elementos para la pestaña 'Mejores Horas y Mercado' en item.html\nfunction getMejoresHorasElements() {\n    return {\n        ventasComprasChartCtx: document.getElementById('ventas-compras-chart')?.getContext('2d'),\n        horaPuntaDiv: document.getElementById('hora-punta'),\n        promedioHoraDiv: document.getElementById('promedio-hora'),\n        promedioDiaDiv: document.getElementById('promedio-dia')\n    };\n}\n\nlet ventasComprasChart = null;\nlet ventasComprasWorker = null;\n\nfunction runIdleTasks(tasks) {\n    function runner(deadline) {\n        while (deadline.timeRemaining() > 0 && tasks.length) {\n            const task = tasks.shift();\n            if (typeof task === 'function') task();\n        }\n        if (tasks.length) {\n            requestIdleCallback(runner);\n        }\n    }\n    requestIdleCallback(runner);\n}\n\n// Utilidad para limpiar indicadores y alertas\nfunction limpiarUI() {\n    const els = getMejoresHorasElements();\n    els.horaPuntaDiv.innerHTML = '';\n    els.promedioHoraDiv.innerHTML = '';\n    els.promedioDiaDiv.innerHTML = '';\n    if (ventasComprasChart) {\n        ventasComprasChart.destroy();\n        ventasComprasChart = null;\n    }\n}\n\n// Función global para integración en item.html\nwindow.cargarMejoresHorasYMercado = async function(itemID) {\n    limpiarUI();\n    await cargarDatosItem(itemID);\n};\n\n// Función principal de carga y análisis\nasync function cargarDatosItem(itemID) {\n    // 1. Obtener histórico horario\n    // 2. Obtener estado actual\n    // 3. Procesar y mostrar cada módulo\n    try {\n        const history = await obtenerHistorialHorario(itemID);\n        const estado = await obtenerEstadoActual(itemID);\n        mostrarGraficoVentasCompras(history);\n        mostrarHoraPunta(history);\n        mostrarPromedios(history);\n    } catch (err) {\n        console.error('Error al cargar datos del ítem', err);\n    }\n}\n\n// --- Funciones stub para cada módulo ---\nexport async function obtenerHistorialHorario(itemID) {\n    const cacheKey = `history_${itemID}`;\n    const cached = getCached(cacheKey, true);\n    const headers = {};\n    if (cached?.etag) headers['If-None-Match'] = cached.etag;\n    if (cached?.lastModified) headers['If-Modified-Since'] = cached.lastModified;\n    try {\n        const url = `https://api.datawars2.ie/gw2/v2/history/hourly/json?itemID=${itemID}`;\n        const response = await fetchWithCache(url, { headers }, cacheKey, cached);\n        if (response.status === 304 && cached) return cached.value;\n        if (!response.ok) {\n            throw new Error(`Error al obtener histórico horario: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const etag = response.headers.get('ETag');\n        const lastModified = response.headers.get('Last-Modified');\n        setCached(cacheKey, data, undefined, { etag, lastModified });\n        return data;\n    } catch (err) {\n        console.error('Error al obtener histórico horario', err);\n        throw new Error(`Error al obtener histórico horario: ${err.message}`);\n    }\n}\n\nexport async function obtenerEstadoActual(itemID) {\n    const cacheKey = `price_${itemID}`;\n    const cached = getCached(cacheKey, true);\n    const headers = {};\n    if (cached?.etag) headers['If-None-Match'] = cached.etag;\n    if (cached?.lastModified) headers['If-Modified-Since'] = cached.lastModified;\n    try {\n        const fields = 'buy_price,sell_price,buy_quantity,sell_quantity,last_updated';\n        const url = `https://api.datawars2.ie/gw2/v1/items/json?fields=${fields}&ids=${itemID}`;\n        const response = await fetchWithCache(url, { headers }, cacheKey, cached);\n        if (response.status === 304 && cached) return cached.value;\n        if (!response.ok) {\n            throw new Error(`Error al obtener estado actual: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const result = Array.isArray(data) ? (data[0] || {}) : (data || {});\n        const etag = response.headers.get('ETag');\n        const lastModified = response.headers.get('Last-Modified');\n        setCached(cacheKey, result, undefined, { etag, lastModified });\n        return result;\n    } catch (err) {\n        console.error('Error al obtener estado actual', err);\n        throw new Error(`Error al obtener estado actual: ${err.message}`);\n    }\n}\nfunction mostrarGraficoVentasCompras(history) {\n    const { ventasComprasChartCtx } = getMejoresHorasElements();\n    if (!ventasComprasChartCtx) return;\n    if (!history || history.length === 0) {\n        const tablaExistente = document.getElementById('mejores-table');\n        if (tablaExistente) tablaExistente.remove();\n        return;\n    }\n    if (!ventasComprasWorker) {\n        ventasComprasWorker = new Worker(\n            new URL('./workers/ventasComprasWorker.js', import.meta.url),\n            { type: 'module' }\n        );\n    }\n    ventasComprasWorker.onmessage = (ev) => {\n        const data = ev.data || {};\n        if (data.empty) {\n            const tablaExistente = document.getElementById('mejores-table');\n            if (tablaExistente) tablaExistente.remove();\n            return;\n        }\n        const { etiquetas, ventas, compras, horaMin, horaMax, totalHoras } = data;\n        let resumenDiv = document.getElementById('resumen-horas');\n        if (!resumenDiv) {\n            resumenDiv = document.createElement('div');\n            resumenDiv.id = 'resumen-horas';\n            resumenDiv.className = 'info-box';\n            const card = ventasComprasChartCtx.canvas.closest('.card');\n            if (card) card.insertBefore(resumenDiv, card.firstChild);\n        }\n        function formateaFechaHistorial(fechaStr) {\n            let dateObj = fechaStr ? new Date(fechaStr) : null;\n            if (dateObj && !isNaN(dateObj)) {\n                return `${dateObj.getFullYear()}-${(dateObj.getMonth()+1).toString().padStart(2,'0')}-${dateObj.getDate().toString().padStart(2,'0')} ${dateObj.getHours().toString().padStart(2,'0')}:00`;\n            }\n            return fechaStr;\n        }\n        const resumenHtml = `<strong>Historial:</strong> ${formateaFechaHistorial(horaMin)} &rarr; ${formateaFechaHistorial(horaMax)} &nbsp; | &nbsp; <strong>Total de horas:</strong> ${totalHoras}`;\n        const tasks = [\n            () => { resumenDiv.innerHTML = resumenHtml; }\n        ];\n        if (ventasComprasChart) tasks.push(() => ventasComprasChart.destroy());\n        tasks.push(() => {\n            ventasComprasChart = new Chart(ventasComprasChartCtx, {\n                type: 'line',\n                data: {\n                    labels: etiquetas,\n                    datasets: [\n                        {\n                            label: 'Vendidos por hora',\n                            data: ventas,\n                            backgroundColor: 'rgba(54, 162, 235, 0.3)',\n                            borderColor: 'rgb(54, 235, 235)',\n                            borderWidth: 2,\n                            pointRadius: 2,\n                            tension: 0.2\n                        },\n                        {\n                            label: 'Comprados por hora',\n                            data: compras,\n                            backgroundColor: 'rgba(255, 206, 86, 0.3)',\n                            borderColor: 'rgb(255, 168, 86)',\n                            borderWidth: 2,\n                            pointRadius: 2,\n                            tension: 0.2\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    plugins: {\n                        legend: { position: 'top' },\n                        title: { display: false }\n                    }\n                }\n            });\n        });\n        tasks.push(() => {\n            let tablaExistente = document.getElementById('mejores-table');\n            if (tablaExistente) tablaExistente.remove();\n            const tabla = document.createElement('table');\n            tabla.className = 'table-modern';\n            tabla.id = 'mejores-table';\n            tabla.innerHTML = `\n              <thead>\n                <tr>\n                  <th><div class=\"dato-item\">Fecha/Hora</div></th>\n                  <th><div class=\"dato-item\">Vendidos</div></th>\n                  <th><div class=\"dato-item\">Comprados</div></th>\n                  <th><div class=\"dato-item\">Precio venta avg</div></th>\n                  <th><div class=\"dato-item\">Precio compra avg</div></th>\n                </tr>\n              </thead>\n              <tbody>\n                ${history.slice(-24).reverse().map(dato => {\n                    let raw = dato.date || '';\n                    let dateObj = raw ? new Date(raw) : null;\n                    let fechaHora = dateObj && !isNaN(dateObj) ?\n                        `${dateObj.getFullYear()}-${(dateObj.getMonth()+1).toString().padStart(2,'0')}-${dateObj.getDate().toString().padStart(2,'0')} ${dateObj.getHours().toString().padStart(2,'0')}:00` : raw;\n                    return `<tr>\n                      <td><div class=\"dato-item-info\">${fechaHora}</div></td>\n                      <td><div class=\"dato-item-info\">${dato.sell_sold ?? ''}</div></td>\n                      <td><div class=\"dato-item-info\">${dato.buy_sold ?? ''}</div></td>\n                      <td><div class=\"dato-item-info\">${dato.sell_price_avg != null ? formatGoldColored(dato.sell_price_avg) : ''}</div></td>\n                      <td><div class=\"dato-item-info\">${dato.buy_price_avg != null ? formatGoldColored(dato.buy_price_avg) : ''}</div></td>\n                    </tr>`;\n                }).join('')}\n              </tbody>\n            `;\n            const card = ventasComprasChartCtx.canvas.closest('.card');\n            if (card) card.appendChild(tabla);\n        });\n        runIdleTasks(tasks);\n    };\n    ventasComprasWorker.postMessage({ history });\n}\n\nfunction mostrarHoraPunta(history) {\n    const { horaPuntaDiv } = getMejoresHorasElements();\n    if (!horaPuntaDiv) return;\n    horaPuntaDiv.innerHTML = '';\n    if (!history || history.length === 0) return;\n\n    let maxTotal = -Infinity;\n    let datoMax = null;\n    history.forEach(d => {\n        const total = (d.sell_sold || 0) + (d.buy_sold || 0);\n        if (total > maxTotal) {\n            maxTotal = total;\n            datoMax = d;\n        }\n    });\n\n    if (datoMax) {\n        let fecha = datoMax.date || '';\n        let dateObj = fecha ? new Date(fecha) : null;\n        if (dateObj && !isNaN(dateObj)) {\n            const yyyy = dateObj.getFullYear();\n            const mm = (dateObj.getMonth()+1).toString().padStart(2,'0');\n            const dd = dateObj.getDate().toString().padStart(2,'0');\n            const hh = dateObj.getHours().toString().padStart(2,'0');\n            fecha = `${yyyy}-${mm}-${dd} ${hh}:00`;\n        }\n        horaPuntaDiv.innerHTML = `<b>Hora punta:</b> ${fecha} &nbsp;|&nbsp; Vendidos: ${datoMax.sell_sold ?? '-'} &nbsp;|&nbsp; Comprados: ${datoMax.buy_sold ?? '-'}`;\n    }\n}\nfunction mostrarPromedios(history) {\n    const { promedioHoraDiv, promedioDiaDiv } = getMejoresHorasElements();\n    if (!promedioHoraDiv || !promedioDiaDiv) return;\n    promedioHoraDiv.innerHTML = '';\n    promedioDiaDiv.innerHTML = '';\n    if (!history || history.length === 0) return;\n\n    let totalSell = 0;\n    let totalBuy = 0;\n    const dias = {};\n\n    history.forEach(d => {\n        const sell = d.sell_sold || 0;\n        const buy = d.buy_sold || 0;\n        totalSell += sell;\n        totalBuy += buy;\n\n        let fecha = d.date ? new Date(d.date) : null;\n        if (fecha && !isNaN(fecha)) {\n            const key = fecha.toISOString().split('T')[0];\n            if (!dias[key]) dias[key] = { s:0, b:0 };\n            dias[key].s += sell;\n            dias[key].b += buy;\n        }\n    });\n\n    const horas = history.length || 1;\n    const numDias = Object.keys(dias).length || 1;\n\n    const avgSellHora = totalSell / horas;\n    const avgBuyHora = totalBuy / horas;\n    const avgSellDia = totalSell / numDias;\n    const avgBuyDia = totalBuy / numDias;\n\n    promedioHoraDiv.innerHTML = `<div class=\"dato-item\">Promedio por hora</div><div class=\"dato-item-info\">Vendidos: ${avgSellHora.toFixed(1)} | Comprados: ${avgBuyHora.toFixed(1)}</div>`;\n    promedioDiaDiv.innerHTML = `<div class=\"dato-item\">Promedio por día</div><div class=\"dato-item-info\">Vendidos: ${avgSellDia.toFixed(1)} | Comprados: ${avgBuyDia.toFixed(1)}</div>`;\n}\n"],"names":["getMejoresHorasElements","ventasComprasChartCtx","document","getElementById","getContext","horaPuntaDiv","promedioHoraDiv","promedioDiaDiv","ventasComprasChart","ventasComprasWorker","async","obtenerHistorialHorario","itemID","cacheKey","cached","getCached","headers","etag","lastModified","url","response","fetchWithCache","status","value","ok","Error","statusText","data","json","get","setCached","undefined","err","console","error","message","obtenerEstadoActual","result","Array","isArray","window","cargarMejoresHorasYMercado","els","innerHTML","destroy","limpiarUI","history","length","tablaExistente","remove","Worker","URL","type","onmessage","ev","empty","etiquetas","ventas","compras","horaMin","horaMax","totalHoras","resumenDiv","createElement","id","className","card","canvas","closest","insertBefore","firstChild","formateaFechaHistorial","fechaStr","dateObj","Date","isNaN","getFullYear","getMonth","toString","padStart","getDate","getHours","resumenHtml","tasks","push","Chart","labels","datasets","label","backgroundColor","borderColor","borderWidth","pointRadius","tension","options","responsive","plugins","legend","position","title","display","tabla","slice","reverse","map","dato","raw","date","sell_sold","buy_sold","sell_price_avg","formatGoldColored","buy_price_avg","join","appendChild","requestIdleCallback","runner","deadline","timeRemaining","task","shift","runIdleTasks","postMessage","mostrarGraficoVentasCompras","maxTotal","Infinity","datoMax","forEach","d","total","fecha","mostrarHoraPunta","totalSell","totalBuy","dias","sell","buy","key","toISOString","split","s","b","horas","numDias","Object","keys","avgSellHora","avgBuyHora","avgSellDia","avgBuyDia","toFixed","mostrarPromedios","cargarDatosItem"],"mappings":"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"}